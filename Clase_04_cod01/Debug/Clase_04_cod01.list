
Clase_04_cod01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e94  08002e94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d475  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab1  00000000  00000000  0002d4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a50  00000000  00000000  0002fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a0d  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c162  00000000  00000000  00053ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9a8a  00000000  00000000  0006002f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139ab9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e24  00000000  00000000  00139b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e5c 	.word	0x08002e5c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002e5c 	.word	0x08002e5c

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <HAL_Init+0x40>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <HAL_Init+0x40>)
 800050e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_Init+0x40>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f931 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 f808 	bl	800053c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800052c:	f002 fbdc 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x54>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f93b 	bl	80007d6 <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e00e      	b.n	8000588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d80a      	bhi.n	8000586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f911 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_InitTick+0x5c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000008 	.word	0x20000008
 8000594:	20000004 	.word	0x20000004
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000028 	.word	0x20000028

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e4:	f7ff ffee 	bl	80005c4 <HAL_GetTick>
 80005e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d005      	beq.n	8000602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_Delay+0x44>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000602:	bf00      	nop
 8000604:	f7ff ffde 	bl	80005c4 <HAL_GetTick>
 8000608:	4602      	mov	r2, r0
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	d8f7      	bhi.n	8000604 <HAL_Delay+0x28>
  {
  }
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff47 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff5c 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff8e 	bl	80006dc <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5d 	bl	8000688 <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffb0 	bl	8000744 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e06c      	b.n	80008dc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000808:	2b00      	cmp	r3, #0
 800080a:	d106      	bne.n	800081a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2223      	movs	r2, #35	; 0x23
 8000810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f869 	bl	80008ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <HAL_ETH_Init+0xf4>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <HAL_ETH_Init+0xf4>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <HAL_ETH_Init+0xf4>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <HAL_ETH_Init+0xf8>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <HAL_ETH_Init+0xf8>)
 800083c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000840:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <HAL_ETH_Init+0xf8>)
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	4927      	ldr	r1, [pc, #156]	; (80008e8 <HAL_ETH_Init+0xf8>)
 800084c:	4313      	orrs	r3, r2
 800084e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <HAL_ETH_Init+0xf8>)
 8000852:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800086a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800086c:	f7ff feaa 	bl	80005c4 <HAL_GetTick>
 8000870:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000872:	e011      	b.n	8000898 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000874:	f7ff fea6 	bl	80005c4 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000882:	d909      	bls.n	8000898 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2204      	movs	r2, #4
 8000888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	22e0      	movs	r2, #224	; 0xe0
 8000890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e021      	b.n	80008dc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1e4      	bne.n	8000874 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f94e 	bl	8000b4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f9f5 	bl	8000ca0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 fa4b 	bl	8000d52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	461a      	mov	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f9b3 	bl	8000c30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2210      	movs	r2, #16
 80008d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40013800 	.word	0x40013800

080008ec <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <ETH_SetMACConfig+0x134>)
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	7c1b      	ldrb	r3, [r3, #16]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <ETH_SetMACConfig+0x28>
 8000922:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000926:	e000      	b.n	800092a <ETH_SetMACConfig+0x2a>
 8000928:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	7c5b      	ldrb	r3, [r3, #17]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <ETH_SetMACConfig+0x38>
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	e000      	b.n	800093a <ETH_SetMACConfig+0x3a>
 8000938:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800093a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8000940:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	7fdb      	ldrb	r3, [r3, #31]
 8000946:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8000948:	431a      	orrs	r2, r3
                        macconf->Speed |
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800094e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	7f92      	ldrb	r2, [r2, #30]
 8000954:	2a00      	cmp	r2, #0
 8000956:	d102      	bne.n	800095e <ETH_SetMACConfig+0x5e>
 8000958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095c:	e000      	b.n	8000960 <ETH_SetMACConfig+0x60>
 800095e:	2200      	movs	r2, #0
                        macconf->Speed |
 8000960:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	7f1b      	ldrb	r3, [r3, #28]
 8000966:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000968:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800096e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8000976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800097e:	2a00      	cmp	r2, #0
 8000980:	d102      	bne.n	8000988 <ETH_SetMACConfig+0x88>
 8000982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000986:	e000      	b.n	800098a <ETH_SetMACConfig+0x8a>
 8000988:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800098a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	7bdb      	ldrb	r3, [r3, #15]
 8000990:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000992:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000998:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80009a2:	4313      	orrs	r3, r2
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fe0e 	bl	80005dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80009e6:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80009ec:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80009f4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80009fc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000a04:	4313      	orrs	r3, r2
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fddd 	bl	80005dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	619a      	str	r2, [r3, #24]
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	ff20810f 	.word	0xff20810f

08000a38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <ETH_SetDMAConfig+0x110>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	7b1b      	ldrb	r3, [r3, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <ETH_SetDMAConfig+0x2c>
 8000a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a62:	e000      	b.n	8000a66 <ETH_SetDMAConfig+0x2e>
 8000a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	7b5b      	ldrb	r3, [r3, #13]
 8000a6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000a6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	7f52      	ldrb	r2, [r2, #29]
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d102      	bne.n	8000a7c <ETH_SetDMAConfig+0x44>
 8000a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a7a:	e000      	b.n	8000a7e <ETH_SetDMAConfig+0x46>
 8000a7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000a7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	7b9b      	ldrb	r3, [r3, #14]
 8000a84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000a86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000a8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	7f1b      	ldrb	r3, [r3, #28]
 8000a92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8000a94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	7f9b      	ldrb	r3, [r3, #30]
 8000a9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000a9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000aa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aaa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000aac:	4313      	orrs	r3, r2
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fd84 	bl	80005dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000adc:	461a      	mov	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000aec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8000af2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000af8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8000b02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000b0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000b10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000b1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fd55 	bl	80005dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	f8de3f23 	.word	0xf8de3f23

08000b4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0a6      	sub	sp, #152	; 0x98
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000bc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe9a 	bl	8000900 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff08 	bl	8000a38 <ETH_SetDMAConfig>
}
 8000c28:	bf00      	nop
 8000c2a:	3798      	adds	r7, #152	; 0x98
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3305      	adds	r3, #5
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	3204      	adds	r2, #4
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <ETH_MACAddressConfig+0x68>)
 8000c52:	4413      	add	r3, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	061a      	lsls	r2, r3, #24
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3302      	adds	r3, #2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	041b      	lsls	r3, r3, #16
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	4313      	orrs	r3, r2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <ETH_MACAddressConfig+0x6c>)
 8000c82:	4413      	add	r3, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40028040 	.word	0x40028040
 8000c9c:	40028044 	.word	0x40028044

08000ca0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e03e      	b.n	8000d2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	3206      	adds	r2, #6
 8000ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d80c      	bhi.n	8000d10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68d9      	ldr	r1, [r3, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	440b      	add	r3, r1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	e004      	b.n	8000d1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	461a      	mov	r2, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d9bd      	bls.n	8000cae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e046      	b.n	8000dee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6919      	ldr	r1, [r3, #16]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8000da4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	3212      	adds	r2, #18
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d80c      	bhi.n	8000dde <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6919      	ldr	r1, [r3, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	e004      	b.n	8000de8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d9b5      	bls.n	8000d60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e1e:	60da      	str	r2, [r3, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e177      	b.n	8001138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8166 	bne.w	8001132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80c0 	beq.w	8001132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b66      	ldr	r3, [pc, #408]	; (8001150 <HAL_GPIO_Init+0x324>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a65      	ldr	r2, [pc, #404]	; (8001150 <HAL_GPIO_Init+0x324>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b63      	ldr	r3, [pc, #396]	; (8001150 <HAL_GPIO_Init+0x324>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a61      	ldr	r2, [pc, #388]	; (8001154 <HAL_GPIO_Init+0x328>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a58      	ldr	r2, [pc, #352]	; (8001158 <HAL_GPIO_Init+0x32c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d037      	beq.n	800106a <HAL_GPIO_Init+0x23e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a57      	ldr	r2, [pc, #348]	; (800115c <HAL_GPIO_Init+0x330>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d031      	beq.n	8001066 <HAL_GPIO_Init+0x23a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a56      	ldr	r2, [pc, #344]	; (8001160 <HAL_GPIO_Init+0x334>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x236>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a55      	ldr	r2, [pc, #340]	; (8001164 <HAL_GPIO_Init+0x338>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x232>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a54      	ldr	r2, [pc, #336]	; (8001168 <HAL_GPIO_Init+0x33c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x22e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a53      	ldr	r2, [pc, #332]	; (800116c <HAL_GPIO_Init+0x340>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x22a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a52      	ldr	r2, [pc, #328]	; (8001170 <HAL_GPIO_Init+0x344>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x226>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a51      	ldr	r2, [pc, #324]	; (8001174 <HAL_GPIO_Init+0x348>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x222>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a50      	ldr	r2, [pc, #320]	; (8001178 <HAL_GPIO_Init+0x34c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x21e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4f      	ldr	r2, [pc, #316]	; (800117c <HAL_GPIO_Init+0x350>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x21a>
 8001042:	2309      	movs	r3, #9
 8001044:	e012      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001046:	230a      	movs	r3, #10
 8001048:	e010      	b.n	800106c <HAL_GPIO_Init+0x240>
 800104a:	2308      	movs	r3, #8
 800104c:	e00e      	b.n	800106c <HAL_GPIO_Init+0x240>
 800104e:	2307      	movs	r3, #7
 8001050:	e00c      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001052:	2306      	movs	r3, #6
 8001054:	e00a      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001056:	2305      	movs	r3, #5
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x240>
 800105a:	2304      	movs	r3, #4
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x240>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x240>
 800106a:	2300      	movs	r3, #0
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_GPIO_Init+0x328>)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_GPIO_Init+0x354>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a34      	ldr	r2, [pc, #208]	; (8001180 <HAL_GPIO_Init+0x354>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <HAL_GPIO_Init+0x354>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <HAL_GPIO_Init+0x354>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_GPIO_Init+0x354>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <HAL_GPIO_Init+0x354>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_GPIO_Init+0x354>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_GPIO_Init+0x354>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	f67f ae84 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40021400 	.word	0x40021400
 8001170:	40021800 	.word	0x40021800
 8001174:	40021c00 	.word	0x40021c00
 8001178:	40022000 	.word	0x40022000
 800117c:	40022400 	.word	0x40022400
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
 8001190:	4613      	mov	r3, r2
 8001192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001194:	787b      	ldrb	r3, [r7, #1]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a0:	e003      	b.n	80011aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	041a      	lsls	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b8:	b08f      	sub	sp, #60	; 0x3c
 80011ba:	af0a      	add	r7, sp, #40	; 0x28
 80011bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e10f      	b.n	80013e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f904 	bl	80013f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f8c1 	bl	800238e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	687e      	ldr	r6, [r7, #4]
 8001214:	466d      	mov	r5, sp
 8001216:	f106 0410 	add.w	r4, r6, #16
 800121a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001226:	e885 0003 	stmia.w	r5, {r0, r1}
 800122a:	1d33      	adds	r3, r6, #4
 800122c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f001 f84c 	bl	80022cc <USB_CoreInit>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2202      	movs	r2, #2
 800123e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0d0      	b.n	80013e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f001 f8af 	bl	80023b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e04a      	b.n	80012ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	333d      	adds	r3, #61	; 0x3d
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	333c      	adds	r3, #60	; 0x3c
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	b298      	uxth	r0, r3
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3344      	adds	r3, #68	; 0x44
 8001294:	4602      	mov	r2, r0
 8001296:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	3340      	adds	r3, #64	; 0x40
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3348      	adds	r3, #72	; 0x48
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	334c      	adds	r3, #76	; 0x4c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	3354      	adds	r3, #84	; 0x54
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	3301      	adds	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3af      	bcc.n	8001258 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e044      	b.n	8001388 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3301      	adds	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3b5      	bcc.n	80012fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	687e      	ldr	r6, [r7, #4]
 800139a:	466d      	mov	r5, sp
 800139c:	f106 0410 	add.w	r4, r6, #16
 80013a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b0:	1d33      	adds	r3, r6, #4
 80013b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f001 f847 	bl	8002448 <USB_DevInit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00d      	b.n	80013e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fa12 	bl	800280a <USB_DevDisconnect>

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f0 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e267      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d075      	beq.n	800150e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00c      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b85      	ldr	r3, [pc, #532]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b7e      	ldr	r3, [pc, #504]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <HAL_RCC_OscConfig+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d157      	bne.n	800150c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e242      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x74>
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a75      	ldr	r2, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6c      	ldr	r2, [pc, #432]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 800149c:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff f882 	bl	80005c4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff f87e 	bl	80005c4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e207      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xc0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff f86e 	bl	80005c4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff f86a 	bl	80005c4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1f3      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0xe8>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c7      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4937      	ldr	r1, [pc, #220]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x244>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff f823 	bl	80005c4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff f81f 	bl	80005c4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a8      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4925      	ldr	r1, [pc, #148]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_RCC_OscConfig+0x244>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff f802 	bl	80005c4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7fe fffe 	bl	80005c4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e187      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d036      	beq.n	800165c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_RCC_OscConfig+0x248>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7fe ffe2 	bl	80005c4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7fe ffde 	bl	80005c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e167      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x200>
 8001622:	e01b      	b.n	800165c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_OscConfig+0x248>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7fe ffcb 	bl	80005c4 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e00e      	b.n	8001650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7fe ffc7 	bl	80005c4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d907      	bls.n	8001650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e150      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ea      	bne.n	8001632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8097 	beq.w	8001798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b7d      	ldr	r3, [pc, #500]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a7c      	ldr	r2, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a73      	ldr	r2, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7fe ff87 	bl	80005c4 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7fe ff83 	bl	80005c4 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e10c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x2ea>
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x30c>
 80016f6:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a5b      	ldr	r2, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d015      	beq.n	800175c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7fe ff48 	bl	80005c4 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7fe ff44 	bl	80005c4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0cb      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ee      	beq.n	8001738 <HAL_RCC_OscConfig+0x334>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7fe ff32 	bl	80005c4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7fe ff2e 	bl	80005c4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0b5      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ee      	bne.n	8001764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a1 	beq.w	80018e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d05c      	beq.n	8001868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d141      	bne.n	800183a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7fe ff02 	bl	80005c4 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7fe fefe 	bl	80005c4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e087      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7fe fed7 	bl	80005c4 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7fe fed3 	bl	80005c4 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e05c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x416>
 8001838:	e054      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7fe fec0 	bl	80005c4 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7fe febc 	bl	80005c4 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e045      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x444>
 8001866:	e03d      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e038      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000
 800187c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d028      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d121      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d111      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e067      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7fe fdee 	bl	80005c4 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7fe fdea 	bl	80005c4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd4e 	bl	800053c <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08002e74 	.word	0x08002e74
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b094      	sub	sp, #80	; 0x50
 8001ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
 8001acc:	2300      	movs	r3, #0
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	f200 80e1 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x3a>
 8001af2:	e0db      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001af8:	e0db      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afa:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afe:	e0d8      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0159      	lsls	r1, r3, #5
 8001b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b44:	0150      	lsls	r0, r2, #5
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	1a51      	subs	r1, r2, r1
 8001b4e:	6139      	str	r1, [r7, #16]
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb63 0301 	sbc.w	r3, r3, r1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b64:	4659      	mov	r1, fp
 8001b66:	018b      	lsls	r3, r1, #6
 8001b68:	4651      	mov	r1, sl
 8001b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6e:	4651      	mov	r1, sl
 8001b70:	018a      	lsls	r2, r1, #6
 8001b72:	4651      	mov	r1, sl
 8001b74:	ebb2 0801 	subs.w	r8, r2, r1
 8001b78:	4659      	mov	r1, fp
 8001b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b92:	4690      	mov	r8, r2
 8001b94:	4699      	mov	r9, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	eb18 0303 	adds.w	r3, r8, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	eb49 0303 	adc.w	r3, r9, r3
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	024b      	lsls	r3, r1, #9
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	024a      	lsls	r2, r1, #9
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bd0:	f7fe fb10 	bl	80001f4 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bdc:	e058      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	4611      	mov	r1, r2
 8001bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	0159      	lsls	r1, r3, #5
 8001c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0a:	0150      	lsls	r0, r2, #5
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4641      	mov	r1, r8
 8001c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c16:	4649      	mov	r1, r9
 8001c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c30:	ebb2 040a 	subs.w	r4, r2, sl
 8001c34:	eb63 050b 	sbc.w	r5, r3, fp
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	00eb      	lsls	r3, r5, #3
 8001c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c46:	00e2      	lsls	r2, r4, #3
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	18e3      	adds	r3, r4, r3
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	464b      	mov	r3, r9
 8001c54:	eb45 0303 	adc.w	r3, r5, r3
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c66:	4629      	mov	r1, r5
 8001c68:	028b      	lsls	r3, r1, #10
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c70:	4621      	mov	r1, r4
 8001c72:	028a      	lsls	r2, r1, #10
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	61fa      	str	r2, [r7, #28]
 8001c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c84:	f7fe fab6 	bl	80001f4 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001caa:	e002      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3750      	adds	r7, #80	; 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08002e84 	.word	0x08002e84

08001d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d10:	f7ff ffdc 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0b5b      	lsrs	r3, r3, #13
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08002e84 	.word	0x08002e84

08001d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e03f      	b.n	8001dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f837 	bl	8001dce <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f833 	bl	8001de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b0c0      	sub	sp, #256	; 0x100
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	ea40 0301 	orr.w	r3, r0, r1
 8001e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e3c:	f021 010c 	bic.w	r1, r1, #12
 8001e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5e:	6999      	ldr	r1, [r3, #24]
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	ea40 0301 	orr.w	r3, r0, r1
 8001e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <UART_SetConfig+0x2cc>)
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d005      	beq.n	8001e84 <UART_SetConfig+0xa0>
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	; (80020b4 <UART_SetConfig+0x2d0>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d104      	bne.n	8001e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e84:	f7ff ff42 	bl	8001d0c <HAL_RCC_GetPCLK2Freq>
 8001e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e8c:	e003      	b.n	8001e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e8e:	f7ff ff29 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8001e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea0:	f040 810c 	bne.w	80020bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	1891      	adds	r1, r2, r2
 8001ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ebe:	415b      	adcs	r3, r3
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	eb12 0801 	adds.w	r8, r2, r1
 8001ecc:	4629      	mov	r1, r5
 8001ece:	eb43 0901 	adc.w	r9, r3, r1
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee6:	4690      	mov	r8, r2
 8001ee8:	4699      	mov	r9, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	eb18 0303 	adds.w	r3, r8, r3
 8001ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	eb49 0303 	adc.w	r3, r9, r3
 8001efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f12:	460b      	mov	r3, r1
 8001f14:	18db      	adds	r3, r3, r3
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
 8001f18:	4613      	mov	r3, r2
 8001f1a:	eb42 0303 	adc.w	r3, r2, r3
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f28:	f7fe f964 	bl	80001f4 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001f32:	fba3 2302 	umull	r2, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	011c      	lsls	r4, r3, #4
 8001f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	464b      	mov	r3, r9
 8001f50:	1891      	adds	r1, r2, r2
 8001f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f54:	415b      	adcs	r3, r3
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8001f62:	4649      	mov	r1, r9
 8001f64:	eb43 0b01 	adc.w	fp, r3, r1
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	469b      	mov	fp, r3
 8001f80:	4643      	mov	r3, r8
 8001f82:	eb1a 0303 	adds.w	r3, sl, r3
 8001f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	18db      	adds	r3, r3, r3
 8001fac:	643b      	str	r3, [r7, #64]	; 0x40
 8001fae:	4613      	mov	r3, r2
 8001fb0:	eb42 0303 	adc.w	r3, r2, r3
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fbe:	f7fe f919 	bl	80001f4 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fca:	fba3 2301 	umull	r2, r3, r3, r1
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2264      	movs	r2, #100	; 0x64
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	1acb      	subs	r3, r1, r3
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fec:	441c      	add	r4, r3
 8001fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002000:	4642      	mov	r2, r8
 8002002:	464b      	mov	r3, r9
 8002004:	1891      	adds	r1, r2, r2
 8002006:	63b9      	str	r1, [r7, #56]	; 0x38
 8002008:	415b      	adcs	r3, r3
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800200c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002010:	4641      	mov	r1, r8
 8002012:	1851      	adds	r1, r2, r1
 8002014:	6339      	str	r1, [r7, #48]	; 0x30
 8002016:	4649      	mov	r1, r9
 8002018:	414b      	adcs	r3, r1
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002028:	4659      	mov	r1, fp
 800202a:	00cb      	lsls	r3, r1, #3
 800202c:	4651      	mov	r1, sl
 800202e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002032:	4651      	mov	r1, sl
 8002034:	00ca      	lsls	r2, r1, #3
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	4603      	mov	r3, r0
 800203c:	4642      	mov	r2, r8
 800203e:	189b      	adds	r3, r3, r2
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002044:	464b      	mov	r3, r9
 8002046:	460a      	mov	r2, r1
 8002048:	eb42 0303 	adc.w	r3, r2, r3
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800205c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002064:	460b      	mov	r3, r1
 8002066:	18db      	adds	r3, r3, r3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	4613      	mov	r3, r2
 800206c:	eb42 0303 	adc.w	r3, r2, r3
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800207a:	f7fe f8bb 	bl	80001f4 <__aeabi_uldivmod>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002084:	fba3 1302 	umull	r1, r3, r3, r2
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	2164      	movs	r1, #100	; 0x64
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	3332      	adds	r3, #50	; 0x32
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	f003 0207 	and.w	r2, r3, #7
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4422      	add	r2, r4
 80020aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020ac:	e105      	b.n	80022ba <UART_SetConfig+0x4d6>
 80020ae:	bf00      	nop
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020ce:	4642      	mov	r2, r8
 80020d0:	464b      	mov	r3, r9
 80020d2:	1891      	adds	r1, r2, r2
 80020d4:	6239      	str	r1, [r7, #32]
 80020d6:	415b      	adcs	r3, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020de:	4641      	mov	r1, r8
 80020e0:	1854      	adds	r4, r2, r1
 80020e2:	4649      	mov	r1, r9
 80020e4:	eb43 0501 	adc.w	r5, r3, r1
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	00eb      	lsls	r3, r5, #3
 80020f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f6:	00e2      	lsls	r2, r4, #3
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	18e3      	adds	r3, r4, r3
 8002100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002104:	464b      	mov	r3, r9
 8002106:	eb45 0303 	adc.w	r3, r5, r3
 800210a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800211a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800212a:	4629      	mov	r1, r5
 800212c:	008b      	lsls	r3, r1, #2
 800212e:	4621      	mov	r1, r4
 8002130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002134:	4621      	mov	r1, r4
 8002136:	008a      	lsls	r2, r1, #2
 8002138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800213c:	f7fe f85a 	bl	80001f4 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <UART_SetConfig+0x4e4>)
 8002146:	fba3 2302 	umull	r2, r3, r3, r2
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	011c      	lsls	r4, r3, #4
 800214e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800215c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	1891      	adds	r1, r2, r2
 8002166:	61b9      	str	r1, [r7, #24]
 8002168:	415b      	adcs	r3, r3
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002170:	4641      	mov	r1, r8
 8002172:	1851      	adds	r1, r2, r1
 8002174:	6139      	str	r1, [r7, #16]
 8002176:	4649      	mov	r1, r9
 8002178:	414b      	adcs	r3, r1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002188:	4659      	mov	r1, fp
 800218a:	00cb      	lsls	r3, r1, #3
 800218c:	4651      	mov	r1, sl
 800218e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002192:	4651      	mov	r1, sl
 8002194:	00ca      	lsls	r2, r1, #3
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4603      	mov	r3, r0
 800219c:	4642      	mov	r2, r8
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a4:	464b      	mov	r3, r9
 80021a6:	460a      	mov	r2, r1
 80021a8:	eb42 0303 	adc.w	r3, r2, r3
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021c8:	4649      	mov	r1, r9
 80021ca:	008b      	lsls	r3, r1, #2
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d2:	4641      	mov	r1, r8
 80021d4:	008a      	lsls	r2, r1, #2
 80021d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021da:	f7fe f80b 	bl	80001f4 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <UART_SetConfig+0x4e4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <UART_SetConfig+0x4e4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002202:	441c      	add	r4, r3
 8002204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002208:	2200      	movs	r2, #0
 800220a:	673b      	str	r3, [r7, #112]	; 0x70
 800220c:	677a      	str	r2, [r7, #116]	; 0x74
 800220e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002212:	4642      	mov	r2, r8
 8002214:	464b      	mov	r3, r9
 8002216:	1891      	adds	r1, r2, r2
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	415b      	adcs	r3, r3
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002222:	4641      	mov	r1, r8
 8002224:	1851      	adds	r1, r2, r1
 8002226:	6039      	str	r1, [r7, #0]
 8002228:	4649      	mov	r1, r9
 800222a:	414b      	adcs	r3, r1
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800223a:	4659      	mov	r1, fp
 800223c:	00cb      	lsls	r3, r1, #3
 800223e:	4651      	mov	r1, sl
 8002240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002244:	4651      	mov	r1, sl
 8002246:	00ca      	lsls	r2, r1, #3
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	4603      	mov	r3, r0
 800224e:	4642      	mov	r2, r8
 8002250:	189b      	adds	r3, r3, r2
 8002252:	66bb      	str	r3, [r7, #104]	; 0x68
 8002254:	464b      	mov	r3, r9
 8002256:	460a      	mov	r2, r1
 8002258:	eb42 0303 	adc.w	r3, r2, r3
 800225c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	667a      	str	r2, [r7, #100]	; 0x64
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002276:	4649      	mov	r1, r9
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	4641      	mov	r1, r8
 800227c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002280:	4641      	mov	r1, r8
 8002282:	008a      	lsls	r2, r1, #2
 8002284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002288:	f7fd ffb4 	bl	80001f4 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <UART_SetConfig+0x4e4>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2164      	movs	r1, #100	; 0x64
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <UART_SetConfig+0x4e4>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4422      	add	r2, r4
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80022cc:	b084      	sub	sp, #16
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	f107 001c 	add.w	r0, r7, #28
 80022da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d122      	bne.n	800232a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80022f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800230c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 faa2 	bl	8002868 <USB_CoreReset>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e01a      	b.n	8002360 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa96 	bl	8002868 <USB_CoreReset>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
 8002352:	e005      	b.n	8002360 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10b      	bne.n	800237e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f043 0206 	orr.w	r2, r3, #6
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f043 0220 	orr.w	r2, r3, #32
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800238a:	b004      	add	sp, #16
 800238c:	4770      	bx	lr

0800238e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0201 	bic.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d115      	bne.n	80023fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe f8fc 	bl	80005dc <HAL_Delay>
      ms++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa2e 	bl	800284c <USB_GetMode>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d01e      	beq.n	8002434 <USB_SetCurrentMode+0x84>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b31      	cmp	r3, #49	; 0x31
 80023fa:	d9f0      	bls.n	80023de <USB_SetCurrentMode+0x2e>
 80023fc:	e01a      	b.n	8002434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d115      	bne.n	8002430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002410:	2001      	movs	r0, #1
 8002412:	f7fe f8e3 	bl	80005dc <HAL_Delay>
      ms++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa15 	bl	800284c <USB_GetMode>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <USB_SetCurrentMode+0x84>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b31      	cmp	r3, #49	; 0x31
 800242c:	d9f0      	bls.n	8002410 <USB_SetCurrentMode+0x60>
 800242e:	e001      	b.n	8002434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e005      	b.n	8002440 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b32      	cmp	r3, #50	; 0x32
 8002438:	d101      	bne.n	800243e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002448:	b084      	sub	sp, #16
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e009      	b.n	800247c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	3340      	adds	r3, #64	; 0x40
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3301      	adds	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0e      	cmp	r3, #14
 8002480:	d9f2      	bls.n	8002468 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11c      	bne.n	80024c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	639a      	str	r2, [r3, #56]	; 0x38
 80024c0:	e00b      	b.n	80024da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80024e0:	461a      	mov	r2, r3
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ec:	4619      	mov	r1, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	461a      	mov	r2, r3
 80024f6:	680b      	ldr	r3, [r1, #0]
 80024f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10c      	bne.n	800251a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002506:	2100      	movs	r1, #0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f965 	bl	80027d8 <USB_SetDevSpeed>
 800250e:	e008      	b.n	8002522 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002510:	2101      	movs	r1, #1
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f960 	bl	80027d8 <USB_SetDevSpeed>
 8002518:	e003      	b.n	8002522 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800251a:	2103      	movs	r1, #3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f95b 	bl	80027d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002522:	2110      	movs	r1, #16
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8f3 	bl	8002710 <USB_FlushTxFifo>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f91f 	bl	8002778 <USB_FlushRxFifo>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254a:	461a      	mov	r2, r3
 800254c:	2300      	movs	r3, #0
 800254e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002556:	461a      	mov	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	461a      	mov	r2, r3
 8002564:	2300      	movs	r3, #0
 8002566:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e043      	b.n	80025f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002584:	d118      	bne.n	80025b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002598:	461a      	mov	r2, r3
 800259a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e013      	b.n	80025ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ae:	461a      	mov	r2, r3
 80025b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e008      	b.n	80025ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c4:	461a      	mov	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d6:	461a      	mov	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	3301      	adds	r3, #1
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d3b7      	bcc.n	800256e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e043      	b.n	800268c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800261a:	d118      	bne.n	800264e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262e:	461a      	mov	r2, r3
 8002630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e013      	b.n	8002660 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e008      	b.n	8002660 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	461a      	mov	r2, r3
 800265c:	2300      	movs	r3, #0
 800265e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	461a      	mov	r2, r3
 800266e:	2300      	movs	r3, #0
 8002670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267e:	461a      	mov	r2, r3
 8002680:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002684:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	3301      	adds	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3b7      	bcc.n	8002604 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80026b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <USB_DevInit+0x2c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80026d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f043 0208 	orr.w	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80026e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002708:	b004      	add	sp, #16
 800270a:	4770      	bx	lr
 800270c:	803c3800 	.word	0x803c3800

08002710 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a13      	ldr	r2, [pc, #76]	; (8002774 <USB_FlushTxFifo+0x64>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e01b      	b.n	8002768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	daf2      	bge.n	800271e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	019b      	lsls	r3, r3, #6
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a08      	ldr	r2, [pc, #32]	; (8002774 <USB_FlushTxFifo+0x64>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e006      	b.n	8002768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d0f0      	beq.n	8002748 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	00030d40 	.word	0x00030d40

08002778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <USB_FlushRxFifo+0x5c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e018      	b.n	80027c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	daf2      	bge.n	8002784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2210      	movs	r2, #16
 80027a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <USB_FlushRxFifo+0x5c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e006      	b.n	80027c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d0f0      	beq.n	80027a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	00030d40 	.word	0x00030d40

080027d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002824:	f023 0303 	bic.w	r3, r3, #3
 8002828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0301 	and.w	r3, r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a13      	ldr	r2, [pc, #76]	; (80028cc <USB_CoreReset+0x64>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e01b      	b.n	80028be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	daf2      	bge.n	8002874 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3301      	adds	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <USB_CoreReset+0x64>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e006      	b.n	80028be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d0f0      	beq.n	800289e <USB_CoreReset+0x36>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	00030d40 	.word	0x00030d40

080028d0 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80028d6:	f3ef 8314 	mrs	r3, CONTROL
 80028da:	607b      	str	r3, [r7, #4]
  return(result);
 80028dc:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80028de:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f383 8814 	msr	CONTROL, r3
}
 80028f2:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80028f4:	f3ef 8314 	mrs	r3, CONTROL
 80028f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80028fa:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80028fc:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f383 8814 	msr	CONTROL, r3
}
 8002910:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002912:	f3ef 8314 	mrs	r3, CONTROL
 8002916:	617b      	str	r3, [r7, #20]
  return(result);
 8002918:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 800291a:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 800291c:	f7fd fc66 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002920:	f3ef 8314 	mrs	r3, CONTROL
 8002924:	61bb      	str	r3, [r7, #24]
  return(result);
 8002926:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8002928:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 800292a:	bf00      	nop
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002938:	f7fd fdde 	bl	80004f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800293c:	f000 f810 	bl	8002960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002940:	f000 f91e 	bl	8002b80 <MX_GPIO_Init>
  MX_ETH_Init();
 8002944:	f000 f876 	bl	8002a34 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002948:	f000 f8c2 	bl	8002ad0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800294c:	f000 f8ea 	bl	8002b24 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8002950:	f7ff ffbe 	bl	80028d0 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 8002954:	2103      	movs	r1, #3
 8002956:	2005      	movs	r0, #5
 8002958:	f7fd fc4a 	bl	80001f0 <asm_sum>
 800295c:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800295e:	e7fe      	b.n	800295e <main+0x2c>

08002960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b094      	sub	sp, #80	; 0x50
 8002964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002966:	f107 0320 	add.w	r3, r7, #32
 800296a:	2230      	movs	r2, #48	; 0x30
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fa6c 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002974:	f107 030c 	add.w	r3, r7, #12
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <SystemClock_Config+0xcc>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <SystemClock_Config+0xcc>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <SystemClock_Config+0xcc>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a0:	2300      	movs	r3, #0
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <SystemClock_Config+0xd0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <SystemClock_Config+0xd0>)
 80029aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <SystemClock_Config+0xd0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029bc:	2301      	movs	r3, #1
 80029be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80029c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c6:	2302      	movs	r3, #2
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029d0:	2304      	movs	r3, #4
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029d4:	23a8      	movs	r3, #168	; 0xa8
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029d8:	2302      	movs	r3, #2
 80029da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029dc:	2307      	movs	r3, #7
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e0:	f107 0320 	add.w	r3, r7, #32
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fd0d 	bl	8001404 <HAL_RCC_OscConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029f0:	f000 f974 	bl	8002cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f4:	230f      	movs	r3, #15
 80029f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f8:	2302      	movs	r3, #2
 80029fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	2105      	movs	r1, #5
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe ff6e 	bl	80018f4 <HAL_RCC_ClockConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a1e:	f000 f95d 	bl	8002cdc <Error_Handler>
  }
}
 8002a22:	bf00      	nop
 8002a24:	3750      	adds	r7, #80	; 0x50
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40007000 	.word	0x40007000

08002a34 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <MX_ETH_Init+0x88>)
 8002a3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a4c:	22e1      	movs	r2, #225	; 0xe1
 8002a4e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a64:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <MX_ETH_Init+0x8c>)
 8002a66:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a6e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a72:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <MX_ETH_Init+0x90>)
 8002a74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <MX_ETH_Init+0x94>)
 8002a7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <MX_ETH_Init+0x84>)
 8002a86:	f7fd feb3 	bl	80007f0 <HAL_ETH_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002a90:	f000 f924 	bl	8002cdc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002a94:	2238      	movs	r2, #56	; 0x38
 8002a96:	2100      	movs	r1, #0
 8002a98:	480c      	ldr	r0, [pc, #48]	; (8002acc <MX_ETH_Init+0x98>)
 8002a9a:	f000 f9d7 	bl	8002e4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MX_ETH_Init+0x98>)
 8002aa0:	2221      	movs	r2, #33	; 0x21
 8002aa2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_ETH_Init+0x98>)
 8002aa6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8002aaa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <MX_ETH_Init+0x98>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200001a4 	.word	0x200001a4
 8002abc:	40028000 	.word	0x40028000
 8002ac0:	200007a4 	.word	0x200007a4
 8002ac4:	20000104 	.word	0x20000104
 8002ac8:	20000064 	.word	0x20000064
 8002acc:	2000002c 	.word	0x2000002c

08002ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <MX_USART3_UART_Init+0x50>)
 8002ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002af6:	220c      	movs	r2, #12
 8002af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_USART3_UART_Init+0x4c>)
 8002b08:	f7ff f914 	bl	8001d34 <HAL_UART_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b12:	f000 f8e3 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000254 	.word	0x20000254
 8002b20:	40004800 	.word	0x40004800

08002b24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b32:	2204      	movs	r2, #4
 8002b34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b44:	2202      	movs	r2, #2
 8002b46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b68:	f7fe fb25 	bl	80011b6 <HAL_PCD_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002b72:	f000 f8b3 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000298 	.word	0x20000298

08002b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	; 0x30
 8002b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a36      	ldr	r2, [pc, #216]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f244 0181 	movw	r1, #16513	; 0x4081
 8002c44:	4822      	ldr	r0, [pc, #136]	; (8002cd0 <MX_GPIO_Init+0x150>)
 8002c46:	f7fe fa9d 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	4821      	ldr	r0, [pc, #132]	; (8002cd4 <MX_GPIO_Init+0x154>)
 8002c50:	f7fe fa98 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	481b      	ldr	r0, [pc, #108]	; (8002cd8 <MX_GPIO_Init+0x158>)
 8002c6c:	f7fe f8de 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002c70:	f244 0381 	movw	r3, #16513	; 0x4081
 8002c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c76:	2301      	movs	r3, #1
 8002c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	4811      	ldr	r0, [pc, #68]	; (8002cd0 <MX_GPIO_Init+0x150>)
 8002c8a:	f7fe f8cf 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002c8e:	2340      	movs	r3, #64	; 0x40
 8002c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <MX_GPIO_Init+0x154>)
 8002ca6:	f7fe f8c1 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_GPIO_Init+0x154>)
 8002cbe:	f7fe f8b5 	bl	8000e2c <HAL_GPIO_Init>

}
 8002cc2:	bf00      	nop
 8002cc4:	3730      	adds	r7, #48	; 0x30
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40021800 	.word	0x40021800
 8002cd8:	40020800 	.word	0x40020800

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <Error_Handler+0x8>
	...

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <NMI_Handler+0x4>

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d84:	f7fd fc0a 	bl	800059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <SystemInit+0x20>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <SystemInit+0x20>)
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002db6:	490e      	ldr	r1, [pc, #56]	; (8002df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db8:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dcc:	4c0b      	ldr	r4, [pc, #44]	; (8002dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dda:	f7ff ffd7 	bl	8002d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f000 f811 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7ff fda6 	bl	8002932 <main>
  bx  lr    
 8002de6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002de8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002df4:	08002e9c 	.word	0x08002e9c
  ldr r2, =_sbss
 8002df8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002dfc:	200007ac 	.word	0x200007ac

08002e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>
	...

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f000 f820 	bl	8002e5c <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08002e94 	.word	0x08002e94
 8002e40:	08002e94 	.word	0x08002e94
 8002e44:	08002e94 	.word	0x08002e94
 8002e48:	08002e98 	.word	0x08002e98

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
