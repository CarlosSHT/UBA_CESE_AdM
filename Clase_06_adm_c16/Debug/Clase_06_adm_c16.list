
Clase_06_adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  0002036c  2**0
                  CONTENTS
  4 .ARM          00000008  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038ac  080038ac  0002036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  080038b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002036c  2**0
                  CONTENTS
 10 .bss          00000acc  2000036c  2000036c  0002036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e38  20000e38  0002036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000cb16  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f522  00000000  00000000  0002ceb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dce  00000000  00000000  0003c3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ba0  00000000  00000000  0003e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9e05  00000000  00000000  0003ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ad8  00000000  00000000  00118b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023c24  00000000  00000000  00119628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d24c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b4  00000000  00000000  0013d29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000036c 	.word	0x2000036c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003874 	.word	0x08003874

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000370 	.word	0x20000370
 80001e8:	08003874 	.word	0x08003874

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
@
.thumb_func
    asm_zeros:
        @ Registros usados
        @   r2: valor cero
        mov r2, 0           @ constante cero
 80001f4:	f04f 0200 	mov.w	r2, #0

080001f8 <.asm_zeros_loop>:
    .asm_zeros_loop:
        str r2, [r0], 4     @ sizeof(uint32_t) == 4, *vector++ = r2
 80001f8:	f840 2b04 	str.w	r2, [r0], #4
        subs r1, 1          @ --longitud
 80001fc:	3901      	subs	r1, #1
        bne .asm_zeros_loop
 80001fe:	d1fb      	bne.n	80001f8 <.asm_zeros_loop>
        bx lr
 8000200:	4770      	bx	lr

08000202 <asm_productoEscalar32>:
@	r2:	longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar32:
    	push {r5}
 8000202:	b420      	push	{r5}

08000204 <.asm_productoEscalar32_loop>:
	.asm_productoEscalar32_loop:
    	ldr r5,[r0],4
 8000204:	f850 5b04 	ldr.w	r5, [r0], #4
    	mul r5,r5,r3
 8000208:	fb05 f503 	mul.w	r5, r5, r3
    	str r5,[r1],4
 800020c:	f841 5b04 	str.w	r5, [r1], #4
    	subs r2,1
 8000210:	3a01      	subs	r2, #1
        bne .asm_productoEscalar32_loop
 8000212:	d1f7      	bne.n	8000204 <.asm_productoEscalar32_loop>
        pop {r5}
 8000214:	bc20      	pop	{r5}
        bx lr
 8000216:	4770      	bx	lr

08000218 <asm_productoEscalar16>:
@	r2:	longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar16:
    	push {r5}
 8000218:	b420      	push	{r5}

0800021a <.asm_productoEscalar16_loop>:
	.asm_productoEscalar16_loop:
    	ldrh r5,[r0],2
 800021a:	f830 5b02 	ldrh.w	r5, [r0], #2
    	mul r5,r5,r3
 800021e:	fb05 f503 	mul.w	r5, r5, r3
    	strh r5,[r1],2
 8000222:	f821 5b02 	strh.w	r5, [r1], #2
    	subs r2,1
 8000226:	3a01      	subs	r2, #1
        bne .asm_productoEscalar16_loop
 8000228:	d1f7      	bne.n	800021a <.asm_productoEscalar16_loop>
        pop {r5}
 800022a:	bc20      	pop	{r5}
        bx lr
 800022c:	4770      	bx	lr

0800022e <asm_productoEscalar12>:
@	r2:	longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar12:
    	push {r5}
 800022e:	b420      	push	{r5}
    	push {r6}
 8000230:	b440      	push	{r6}
    	mov r6,#0x0FFF
 8000232:	f640 76ff 	movw	r6, #4095	; 0xfff

08000236 <.asm_productoEscalar12_loop>:
	.asm_productoEscalar12_loop:
    	ldrh r5,[r0],2
 8000236:	f830 5b02 	ldrh.w	r5, [r0], #2
    	mul r5,r5,r3
 800023a:	fb05 f503 	mul.w	r5, r5, r3
    	@subs r6,r5
    	@bpl .nosatura
    	@mov r5,4095
    	usat r5, 12, r5
 800023e:	f385 050c 	usat	r5, #12, r5
    @.nosatura:
    	@mov r6,#0x0FFF
    	@and r5,r5,r6
    	strh r5,[r1],2
 8000242:	f821 5b02 	strh.w	r5, [r1], #2
    	subs r2,1
 8000246:	3a01      	subs	r2, #1
        bne .asm_productoEscalar12_loop
 8000248:	d1f5      	bne.n	8000236 <.asm_productoEscalar12_loop>
        pop {r6}
 800024a:	bc40      	pop	{r6}
        pop {r5}
 800024c:	bc20      	pop	{r5}
        bx lr
 800024e:	4770      	bx	lr

08000250 <asm_filtroVentana10>:
@   r1: * vectorOut
@	r2:	longitudVectorIn
@
.thumb_func
    asm_filtroVentana10:
    	push {r4-r8}
 8000250:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    	mov r3, r2
 8000254:	4613      	mov	r3, r2
		@sub r3,1	@ longitud vector -1 Ejem: 100 elemnt => 0 - 99
		mov r8, 3	@ r4 window size = 3
 8000256:	f04f 0803 	mov.w	r8, #3

0800025a <.asm_filtroVentana10_loop_1>:
    	.asm_filtroVentana10_loop_1:

	    	mov r4, r8
 800025a:	4644      	mov	r4, r8
    		mov r7, r4
 800025c:	4627      	mov	r7, r4
			sub r4, 1		@ r4 carga tama침o ventana -1
 800025e:	f1a4 0401 	sub.w	r4, r4, #1
    		mov r6, 0
 8000262:	f04f 0600 	mov.w	r6, #0

08000266 <.asm_filtroVentana10_loop_2>:
	    	.asm_filtroVentana10_loop_2:

    			add r4, r7, r3		@ r4 = (tama침o ventana -1) + (longitud dinamico vector -1)
 8000266:	eb07 0403 	add.w	r4, r7, r3
    			sub r4, 2
 800026a:	f1a4 0402 	sub.w	r4, r4, #2
    			udiv r5, r4, r2	@ r5 = r4/ longitud real
 800026e:	fbb4 f5f2 	udiv	r5, r4, r2
    			mul	r5, r5, r2	@ r5 = r5(division) * r2(longitud)
 8000272:	fb05 f502 	mul.w	r5, r5, r2
    			sub r4, r4, r5	@ r4 = r4 (long+ven-2) MOD r5 (div*long)
 8000276:	eba4 0405 	sub.w	r4, r4, r5
				mov r5,2		@ r5 = 2 bytes
 800027a:	f04f 0502 	mov.w	r5, #2
	    		mul r5, r4, r5	@ r5 = indice = MOD * r7 ( 2bytes)
 800027e:	fb04 f505 	mul.w	r5, r4, r5
	    		ldrh r5, [r0, r5]
 8000282:	5b45      	ldrh	r5, [r0, r5]
    			add r6, r5
 8000284:	442e      	add	r6, r5
    			subs r7, 1
 8000286:	3f01      	subs	r7, #1
	    		bne .asm_filtroVentana10_loop_2
 8000288:	d1ed      	bne.n	8000266 <.asm_filtroVentana10_loop_2>

	    	mov r5, 2			@ r5 carga valor bytes en 16bits = 2
 800028a:	f04f 0502 	mov.w	r5, #2
	    	mul r5, r3, r5		@ r5 r3 ( indice actual vector ) * r5 ( 2 bytes )
 800028e:	fb03 f505 	mul.w	r5, r3, r5
	    	sub r5, 2			@ r5 disminuido en 2 (2 bytes)
 8000292:	f1a5 0502 	sub.w	r5, r5, #2
			udiv r6, r8			@ r6 = r6(acumulaci칩n) / r8(tama침o ventana)
 8000296:	fbb6 f6f8 	udiv	r6, r6, r8
    		strh r6,[r1,r5]		@ r6 vectorOut actualizado
 800029a:	534e      	strh	r6, [r1, r5]
			subs r3,1
 800029c:	3b01      	subs	r3, #1
    		bne .asm_filtroVentana10_loop_1
 800029e:	d1dc      	bne.n	800025a <.asm_filtroVentana10_loop_1>
    	pop {r4-r8}
 80002a0:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
        bx lr
 80002a4:	4770      	bx	lr

080002a6 <asm_pack32to16>:
@   r1: * vectorOut
@	r2:	longitud
@
.thumb_func
    asm_pack32to16:
    	push {r4}
 80002a6:	b410      	push	{r4}
    	mov r4, 16			@ bits a desplazar a la derecha
 80002a8:	f04f 0410 	mov.w	r4, #16

080002ac <.asm_pack32to16_loop>:
    	.asm_pack32to16_loop:
	    	ldr r3,[r0],4	@ carga r0 a r3 en 32 bits
 80002ac:	f850 3b04 	ldr.w	r3, [r0], #4
	    	lsr r3, r4		@ desplazamiento a derecha
 80002b0:	fa23 f304 	lsr.w	r3, r3, r4
	    	strh r3,[r1],2	@ carga r3 a r1 en 16 bits
 80002b4:	f821 3b02 	strh.w	r3, [r1], #2
	    	subs r2, 1		@ longitud -1
 80002b8:	3a01      	subs	r2, #1
	    	bne .asm_pack32to16_loop	@ fin del bucle
 80002ba:	d1f7      	bne.n	80002ac <.asm_pack32to16_loop>
    	pop {r4}
 80002bc:	bc10      	pop	{r4}
    	bx lr
 80002be:	4770      	bx	lr

080002c0 <asm_max>:
@   r0: * vectorIn
@   r1: longitud
@
.thumb_func
    asm_max:
		push {r4,r5}
 80002c0:	b430      	push	{r4, r5}
		mov r5, r1	@ copia valor longitud
 80002c2:	460d      	mov	r5, r1
		mov r4, r2	@ maximo valor anterior
 80002c4:	4614      	mov	r4, r2
		mov r3, r1 	@ posicion max valor
 80002c6:	460b      	mov	r3, r1

080002c8 <.asm_max_loop>:
    	.asm_max_loop:
    		ldr	r2, [r0], 4
 80002c8:	f850 2b04 	ldr.w	r2, [r0], #4
    		cmp r4, r2
 80002cc:	4294      	cmp	r4, r2
    		bpl .asm_max_r2max
 80002ce:	d501      	bpl.n	80002d4 <.asm_max_r2max>
    		mov r4, r2
 80002d0:	4614      	mov	r4, r2
    		mov r3, r1
 80002d2:	460b      	mov	r3, r1

080002d4 <.asm_max_r2max>:
    		.asm_max_r2max:
    		subs r1, 1
 80002d4:	3901      	subs	r1, #1
    		bne .asm_max_loop
 80002d6:	d1f7      	bne.n	80002c8 <.asm_max_loop>
		sub r3, r5, r3
 80002d8:	eba5 0303 	sub.w	r3, r5, r3
		mov r0, r3
 80002dc:	4618      	mov	r0, r3
		pop {r4,r5}
 80002de:	bc30      	pop	{r4, r5}
    	bx lr
 80002e0:	4770      	bx	lr

080002e2 <asm_downsampleM>:
@	r2:	longitud
@	r3:	N
@
.thumb_func
    asm_downsampleM:
		push {r4,r5,r6}
 80002e2:	b470      	push	{r4, r5, r6}
		mov r5, r2 	@ carga longitud en r5
 80002e4:	4615      	mov	r5, r2

080002e6 <.asm_downsampleM_loop>:
		.asm_downsampleM_loop:
			sub r4, r5, r2
 80002e6:	eba5 0402 	sub.w	r4, r5, r2
			add r4, 1
 80002ea:	f104 0401 	add.w	r4, r4, #1
			udiv r6, r4, r3
 80002ee:	fbb4 f6f3 	udiv	r6, r4, r3
			mul r6, r6, r3
 80002f2:	fb06 f603 	mul.w	r6, r6, r3
			subs r6, r4, r6
 80002f6:	1ba6      	subs	r6, r4, r6
			beq .asm_downsampleM_noresiduo
 80002f8:	d002      	beq.n	8000300 <.asm_downsampleM_noresiduo>
				@mul r5, r2, 4
				@sub r5, 4
				ldr r4, [r0]
 80002fa:	6804      	ldr	r4, [r0, #0]
				str r4, [r1],4
 80002fc:	f841 4b04 	str.w	r4, [r1], #4

08000300 <.asm_downsampleM_noresiduo>:
			.asm_downsampleM_noresiduo:
			add r0, 4
 8000300:	f100 0004 	add.w	r0, r0, #4
			subs r2,1
 8000304:	3a01      	subs	r2, #1

			bne .asm_downsampleM_loop
 8000306:	d1ee      	bne.n	80002e6 <.asm_downsampleM_loop>
		pop {r4,r5,r6}
 8000308:	bc70      	pop	{r4, r5, r6}
    	bx lr
 800030a:	4770      	bx	lr

0800030c <asm_invertir>:
@   r0: * vector
@   r1: longitud
@
.thumb_func
    asm_invertir:
    	push {r4} // longitud mitad
 800030c:	b410      	push	{r4}
    	push {r5}	// nro
 800030e:	b420      	push	{r5}
    	push {r6}	// nro
 8000310:	b440      	push	{r6}
    	mov r5,2
 8000312:	f04f 0502 	mov.w	r5, #2
    	mov r6,0
 8000316:	f04f 0600 	mov.w	r6, #0
    	udiv r4,r1,r5
 800031a:	fbb1 f4f5 	udiv	r4, r1, r5

0800031e <.asm_invertir_loop>:
    	.asm_invertir_loop:
    		mov r5,2
 800031e:	f04f 0502 	mov.w	r5, #2
	    	subs r1,1
 8000322:	3901      	subs	r1, #1
	    	mul r5,r1,r5
 8000324:	fb01 f505 	mul.w	r5, r1, r5
	    	ldrh r2,[r0,r6]
 8000328:	5b82      	ldrh	r2, [r0, r6]
	    	ldrh r3,[r0,r5]
 800032a:	5b43      	ldrh	r3, [r0, r5]
	    	strh r2,[r0,r5]
 800032c:	5342      	strh	r2, [r0, r5]
	    	strh r3,[r0,r6]
 800032e:	5383      	strh	r3, [r0, r6]
	    	add r6,2
 8000330:	f106 0602 	add.w	r6, r6, #2
    		subs r4,1
 8000334:	3c01      	subs	r4, #1
    		bne .asm_invertir_loop
 8000336:	d1f2      	bne.n	800031e <.asm_invertir_loop>
        pop {r6}
 8000338:	bc40      	pop	{r6}
        pop {r5}
 800033a:	bc20      	pop	{r5}
        pop {r4}
 800033c:	bc10      	pop	{r4}
        bx lr
 800033e:	4770      	bx	lr

08000340 <asm_corr>:
@   r2: * vectorCorr
@   r3: longitud
@
.thumb_func
    asm_corr:
    	push {r4,r5,r6,r7,r8,r9,r10}
 8000340:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
		@ r5 sera una copia de longitud que variar치
		@ r6 es el longitud - r5
		@ r7 tendr치 el valor de vectorX
		@ r8 tendr치 el valor de vectorY
		@ r9 acumulador
		sub r4, r3, 1
 8000344:	f1a3 0401 	sub.w	r4, r3, #1
		neg r4, r4
 8000348:	f1c4 0400 	rsb	r4, r4, #0

0800034c <.asm_corr_loop_l>:

		.asm_corr_loop_l:
			mov r5, r3
 800034c:	461d      	mov	r5, r3
			mov r9, #0
 800034e:	f04f 0900 	mov.w	r9, #0

08000352 <.asm_corr_loop_n>:
			.asm_corr_loop_n:


				sub r6, r3, r5				@ r6= r3-r5  (16-15)
 8000352:	eba3 0605 	sub.w	r6, r3, r5
				ldr r7, [r0, r6, LSL 1]	@ vectorX
 8000356:	f850 7016 	ldr.w	r7, [r0, r6, lsl #1]
				cmp r6, #1
 800035a:	2e01      	cmp	r6, #1
				itt eq
 800035c:	bf04      	itt	eq
					lsleq r7, r7, #16
 800035e:	043f      	lsleq	r7, r7, #16
					lsreq r7, r7, #16
 8000360:	0c3f      	lsreq	r7, r7, #16

				@ 1춿 cuando tengo n-l > tama침o vector(r3)-1: no me interesa
				@ 2  cuando tengo n-l < -1: no me interesa
				@
				@ obtnego r10 que tiene el valor de n-l
				sub r10, r6, r4				@ n(r6)-l(r4)
 8000362:	eba6 0a04 	sub.w	sl, r6, r4

				cmp r10,r3
 8000366:	459a      	cmp	sl, r3
				bpl .asm_corr_finciclo
 8000368:	d51e      	bpl.n	80003a8 <.asm_corr_finciclo>

				sub r10, r6, r4				@ n(r6)-l(r4)
 800036a:	eba6 0a04 	sub.w	sl, r6, r4
				add r10, #1
 800036e:	f10a 0a01 	add.w	sl, sl, #1
				cmp r10, 0
 8000372:	f1ba 0f00 	cmp.w	sl, #0
				bmi .asm_corr_finciclo
 8000376:	d417      	bmi.n	80003a8 <.asm_corr_finciclo>

				@ carga en bruto 2 bytes en r8 (vector y)
				sub r10, r6, r4				@ n(r6)-l(r4)
 8000378:	eba6 0a04 	sub.w	sl, r6, r4
				ldr r8, [r1, r10, LSL 1]	@ vectorY
 800037c:	f851 801a 	ldr.w	r8, [r1, sl, lsl #1]

				@ casos especiale al inicio y al fin modifican r8
								@sub r10, r3, r5   @ r10 toma el valor de n (0-15) que incrementa +2 cada vez
				@ FINAL si n+1-l>r3 todo se borra pero esto ya deberia estar cubierto
				@ entonces es si n+1-l==r3 entonces ahi se corta el r8
				sub r10, r6, r4				@ n(r6)-l(r4)
 8000380:	eba6 0a04 	sub.w	sl, r6, r4
				add r10, #1
 8000384:	f10a 0a01 	add.w	sl, sl, #1
				cmp r10, r3
 8000388:	459a      	cmp	sl, r3
				itt eq
 800038a:	bf04      	itt	eq
					lsleq r8, r8, #16
 800038c:	ea4f 4808 	moveq.w	r8, r8, lsl #16
					lsreq r8, r8, #16
 8000390:	ea4f 4818 	moveq.w	r8, r8, lsr #16
				@ INICIO
				@ Si n-l==-1 > aplicar mascara
				@ n-l+1==0 aplicar
				@sub r10, r6, r4				@ n(r6)-l(r4)	repetido linea 352
				@add r10, #1									repetido linea 353
				cmp r10, 0
 8000394:	f1ba 0f00 	cmp.w	sl, #0
				itt eq
 8000398:	bf04      	itt	eq
					lsreq r8, r8, #16
 800039a:	ea4f 4818 	moveq.w	r8, r8, lsr #16
					lsleq r8, r8, #16
 800039e:	ea4f 4808 	moveq.w	r8, r8, lsl #16
					@andeq r8, r8, #0x00FF	@ termino de obtener r8

				smuad r8, r7, r8
 80003a2:	fb27 f808 	smuad	r8, r7, r8
				add r9, r8
 80003a6:	44c1      	add	r9, r8

080003a8 <.asm_corr_finciclo>:



				.asm_corr_finciclo:
				mov r10, 0
 80003a8:	f04f 0a00 	mov.w	sl, #0
				sub r5, #2
 80003ac:	f1a5 0502 	sub.w	r5, r5, #2
				cmp r10, r5
 80003b0:	45aa      	cmp	sl, r5
				bmi .asm_corr_loop_n
 80003b2:	d4ce      	bmi.n	8000352 <.asm_corr_loop_n>

			str r9, [r2], 4
 80003b4:	f842 9b04 	str.w	r9, [r2], #4
			add r4, #1
 80003b8:	f104 0401 	add.w	r4, r4, #1
			cmp r4, r3
 80003bc:	429c      	cmp	r4, r3
			bmi .asm_corr_loop_l
 80003be:	d4c5      	bmi.n	800034c <.asm_corr_loop_l>

     	push {r4,r5,r6,r7,r8,r9}
 80003c0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
        bx lr
 80003c4:	4770      	bx	lr

080003c6 <asm_testvector>:



.thumb_func
    asm_testvector:
    	mov r3,7
 80003c6:	f04f 0307 	mov.w	r3, #7

080003ca <.asm_testvector_loop>:
    	.asm_testvector_loop:
    		ldr r2,[r0],4
 80003ca:	f850 2b04 	ldr.w	r2, [r0], #4
    		subs r3,1
 80003ce:	3b01      	subs	r3, #1
    		bne .asm_testvector_loop
 80003d0:	d1fb      	bne.n	80003ca <.asm_testvector_loop>
        bx lr
 80003d2:	4770      	bx	lr

080003d4 <__aeabi_uldivmod>:
 80003d4:	b953      	cbnz	r3, 80003ec <__aeabi_uldivmod+0x18>
 80003d6:	b94a      	cbnz	r2, 80003ec <__aeabi_uldivmod+0x18>
 80003d8:	2900      	cmp	r1, #0
 80003da:	bf08      	it	eq
 80003dc:	2800      	cmpeq	r0, #0
 80003de:	bf1c      	itt	ne
 80003e0:	f04f 31ff 	movne.w	r1, #4294967295
 80003e4:	f04f 30ff 	movne.w	r0, #4294967295
 80003e8:	f000 b974 	b.w	80006d4 <__aeabi_idiv0>
 80003ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80003f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f4:	f000 f806 	bl	8000404 <__udivmoddi4>
 80003f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000400:	b004      	add	sp, #16
 8000402:	4770      	bx	lr

08000404 <__udivmoddi4>:
 8000404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000408:	9d08      	ldr	r5, [sp, #32]
 800040a:	4604      	mov	r4, r0
 800040c:	468e      	mov	lr, r1
 800040e:	2b00      	cmp	r3, #0
 8000410:	d14d      	bne.n	80004ae <__udivmoddi4+0xaa>
 8000412:	428a      	cmp	r2, r1
 8000414:	4694      	mov	ip, r2
 8000416:	d969      	bls.n	80004ec <__udivmoddi4+0xe8>
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	b152      	cbz	r2, 8000434 <__udivmoddi4+0x30>
 800041e:	fa01 f302 	lsl.w	r3, r1, r2
 8000422:	f1c2 0120 	rsb	r1, r2, #32
 8000426:	fa20 f101 	lsr.w	r1, r0, r1
 800042a:	fa0c fc02 	lsl.w	ip, ip, r2
 800042e:	ea41 0e03 	orr.w	lr, r1, r3
 8000432:	4094      	lsls	r4, r2
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	0c21      	lsrs	r1, r4, #16
 800043a:	fbbe f6f8 	udiv	r6, lr, r8
 800043e:	fa1f f78c 	uxth.w	r7, ip
 8000442:	fb08 e316 	mls	r3, r8, r6, lr
 8000446:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800044a:	fb06 f107 	mul.w	r1, r6, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d90a      	bls.n	8000468 <__udivmoddi4+0x64>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f106 30ff 	add.w	r0, r6, #4294967295
 800045a:	f080 811f 	bcs.w	800069c <__udivmoddi4+0x298>
 800045e:	4299      	cmp	r1, r3
 8000460:	f240 811c 	bls.w	800069c <__udivmoddi4+0x298>
 8000464:	3e02      	subs	r6, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3310 	mls	r3, r8, r0, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb00 f707 	mul.w	r7, r0, r7
 800047c:	42a7      	cmp	r7, r4
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x92>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 33ff 	add.w	r3, r0, #4294967295
 8000488:	f080 810a 	bcs.w	80006a0 <__udivmoddi4+0x29c>
 800048c:	42a7      	cmp	r7, r4
 800048e:	f240 8107 	bls.w	80006a0 <__udivmoddi4+0x29c>
 8000492:	4464      	add	r4, ip
 8000494:	3802      	subs	r0, #2
 8000496:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049a:	1be4      	subs	r4, r4, r7
 800049c:	2600      	movs	r6, #0
 800049e:	b11d      	cbz	r5, 80004a8 <__udivmoddi4+0xa4>
 80004a0:	40d4      	lsrs	r4, r2
 80004a2:	2300      	movs	r3, #0
 80004a4:	e9c5 4300 	strd	r4, r3, [r5]
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d909      	bls.n	80004c6 <__udivmoddi4+0xc2>
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	f000 80ef 	beq.w	8000696 <__udivmoddi4+0x292>
 80004b8:	2600      	movs	r6, #0
 80004ba:	e9c5 0100 	strd	r0, r1, [r5]
 80004be:	4630      	mov	r0, r6
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	fab3 f683 	clz	r6, r3
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d14a      	bne.n	8000564 <__udivmoddi4+0x160>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xd4>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 80f9 	bhi.w	80006ca <__udivmoddi4+0x2c6>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb61 0303 	sbc.w	r3, r1, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	469e      	mov	lr, r3
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e0      	beq.n	80004a8 <__udivmoddi4+0xa4>
 80004e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ea:	e7dd      	b.n	80004a8 <__udivmoddi4+0xa4>
 80004ec:	b902      	cbnz	r2, 80004f0 <__udivmoddi4+0xec>
 80004ee:	deff      	udf	#255	; 0xff
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	f040 8092 	bne.w	800061e <__udivmoddi4+0x21a>
 80004fa:	eba1 010c 	sub.w	r1, r1, ip
 80004fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000502:	fa1f fe8c 	uxth.w	lr, ip
 8000506:	2601      	movs	r6, #1
 8000508:	0c20      	lsrs	r0, r4, #16
 800050a:	fbb1 f3f7 	udiv	r3, r1, r7
 800050e:	fb07 1113 	mls	r1, r7, r3, r1
 8000512:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000516:	fb0e f003 	mul.w	r0, lr, r3
 800051a:	4288      	cmp	r0, r1
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x12c>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f103 38ff 	add.w	r8, r3, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x12a>
 8000528:	4288      	cmp	r0, r1
 800052a:	f200 80cb 	bhi.w	80006c4 <__udivmoddi4+0x2c0>
 800052e:	4643      	mov	r3, r8
 8000530:	1a09      	subs	r1, r1, r0
 8000532:	b2a4      	uxth	r4, r4
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1110 	mls	r1, r7, r0, r1
 800053c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000540:	fb0e fe00 	mul.w	lr, lr, r0
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x156>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d202      	bcs.n	8000558 <__udivmoddi4+0x154>
 8000552:	45a6      	cmp	lr, r4
 8000554:	f200 80bb 	bhi.w	80006ce <__udivmoddi4+0x2ca>
 8000558:	4608      	mov	r0, r1
 800055a:	eba4 040e 	sub.w	r4, r4, lr
 800055e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000562:	e79c      	b.n	800049e <__udivmoddi4+0x9a>
 8000564:	f1c6 0720 	rsb	r7, r6, #32
 8000568:	40b3      	lsls	r3, r6
 800056a:	fa22 fc07 	lsr.w	ip, r2, r7
 800056e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000572:	fa20 f407 	lsr.w	r4, r0, r7
 8000576:	fa01 f306 	lsl.w	r3, r1, r6
 800057a:	431c      	orrs	r4, r3
 800057c:	40f9      	lsrs	r1, r7
 800057e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000582:	fa00 f306 	lsl.w	r3, r0, r6
 8000586:	fbb1 f8f9 	udiv	r8, r1, r9
 800058a:	0c20      	lsrs	r0, r4, #16
 800058c:	fa1f fe8c 	uxth.w	lr, ip
 8000590:	fb09 1118 	mls	r1, r9, r8, r1
 8000594:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000598:	fb08 f00e 	mul.w	r0, r8, lr
 800059c:	4288      	cmp	r0, r1
 800059e:	fa02 f206 	lsl.w	r2, r2, r6
 80005a2:	d90b      	bls.n	80005bc <__udivmoddi4+0x1b8>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005ac:	f080 8088 	bcs.w	80006c0 <__udivmoddi4+0x2bc>
 80005b0:	4288      	cmp	r0, r1
 80005b2:	f240 8085 	bls.w	80006c0 <__udivmoddi4+0x2bc>
 80005b6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ba:	4461      	add	r1, ip
 80005bc:	1a09      	subs	r1, r1, r0
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80005c4:	fb09 1110 	mls	r1, r9, r0, r1
 80005c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80005d0:	458e      	cmp	lr, r1
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x1e2>
 80005d4:	eb1c 0101 	adds.w	r1, ip, r1
 80005d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005dc:	d26c      	bcs.n	80006b8 <__udivmoddi4+0x2b4>
 80005de:	458e      	cmp	lr, r1
 80005e0:	d96a      	bls.n	80006b8 <__udivmoddi4+0x2b4>
 80005e2:	3802      	subs	r0, #2
 80005e4:	4461      	add	r1, ip
 80005e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ea:	fba0 9402 	umull	r9, r4, r0, r2
 80005ee:	eba1 010e 	sub.w	r1, r1, lr
 80005f2:	42a1      	cmp	r1, r4
 80005f4:	46c8      	mov	r8, r9
 80005f6:	46a6      	mov	lr, r4
 80005f8:	d356      	bcc.n	80006a8 <__udivmoddi4+0x2a4>
 80005fa:	d053      	beq.n	80006a4 <__udivmoddi4+0x2a0>
 80005fc:	b15d      	cbz	r5, 8000616 <__udivmoddi4+0x212>
 80005fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000602:	eb61 010e 	sbc.w	r1, r1, lr
 8000606:	fa01 f707 	lsl.w	r7, r1, r7
 800060a:	fa22 f306 	lsr.w	r3, r2, r6
 800060e:	40f1      	lsrs	r1, r6
 8000610:	431f      	orrs	r7, r3
 8000612:	e9c5 7100 	strd	r7, r1, [r5]
 8000616:	2600      	movs	r6, #0
 8000618:	4631      	mov	r1, r6
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	40d8      	lsrs	r0, r3
 8000624:	fa0c fc02 	lsl.w	ip, ip, r2
 8000628:	fa21 f303 	lsr.w	r3, r1, r3
 800062c:	4091      	lsls	r1, r2
 800062e:	4301      	orrs	r1, r0
 8000630:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000634:	fa1f fe8c 	uxth.w	lr, ip
 8000638:	fbb3 f0f7 	udiv	r0, r3, r7
 800063c:	fb07 3610 	mls	r6, r7, r0, r3
 8000640:	0c0b      	lsrs	r3, r1, #16
 8000642:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000646:	fb00 f60e 	mul.w	r6, r0, lr
 800064a:	429e      	cmp	r6, r3
 800064c:	fa04 f402 	lsl.w	r4, r4, r2
 8000650:	d908      	bls.n	8000664 <__udivmoddi4+0x260>
 8000652:	eb1c 0303 	adds.w	r3, ip, r3
 8000656:	f100 38ff 	add.w	r8, r0, #4294967295
 800065a:	d22f      	bcs.n	80006bc <__udivmoddi4+0x2b8>
 800065c:	429e      	cmp	r6, r3
 800065e:	d92d      	bls.n	80006bc <__udivmoddi4+0x2b8>
 8000660:	3802      	subs	r0, #2
 8000662:	4463      	add	r3, ip
 8000664:	1b9b      	subs	r3, r3, r6
 8000666:	b289      	uxth	r1, r1
 8000668:	fbb3 f6f7 	udiv	r6, r3, r7
 800066c:	fb07 3316 	mls	r3, r7, r6, r3
 8000670:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000674:	fb06 f30e 	mul.w	r3, r6, lr
 8000678:	428b      	cmp	r3, r1
 800067a:	d908      	bls.n	800068e <__udivmoddi4+0x28a>
 800067c:	eb1c 0101 	adds.w	r1, ip, r1
 8000680:	f106 38ff 	add.w	r8, r6, #4294967295
 8000684:	d216      	bcs.n	80006b4 <__udivmoddi4+0x2b0>
 8000686:	428b      	cmp	r3, r1
 8000688:	d914      	bls.n	80006b4 <__udivmoddi4+0x2b0>
 800068a:	3e02      	subs	r6, #2
 800068c:	4461      	add	r1, ip
 800068e:	1ac9      	subs	r1, r1, r3
 8000690:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000694:	e738      	b.n	8000508 <__udivmoddi4+0x104>
 8000696:	462e      	mov	r6, r5
 8000698:	4628      	mov	r0, r5
 800069a:	e705      	b.n	80004a8 <__udivmoddi4+0xa4>
 800069c:	4606      	mov	r6, r0
 800069e:	e6e3      	b.n	8000468 <__udivmoddi4+0x64>
 80006a0:	4618      	mov	r0, r3
 80006a2:	e6f8      	b.n	8000496 <__udivmoddi4+0x92>
 80006a4:	454b      	cmp	r3, r9
 80006a6:	d2a9      	bcs.n	80005fc <__udivmoddi4+0x1f8>
 80006a8:	ebb9 0802 	subs.w	r8, r9, r2
 80006ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006b0:	3801      	subs	r0, #1
 80006b2:	e7a3      	b.n	80005fc <__udivmoddi4+0x1f8>
 80006b4:	4646      	mov	r6, r8
 80006b6:	e7ea      	b.n	800068e <__udivmoddi4+0x28a>
 80006b8:	4620      	mov	r0, r4
 80006ba:	e794      	b.n	80005e6 <__udivmoddi4+0x1e2>
 80006bc:	4640      	mov	r0, r8
 80006be:	e7d1      	b.n	8000664 <__udivmoddi4+0x260>
 80006c0:	46d0      	mov	r8, sl
 80006c2:	e77b      	b.n	80005bc <__udivmoddi4+0x1b8>
 80006c4:	3b02      	subs	r3, #2
 80006c6:	4461      	add	r1, ip
 80006c8:	e732      	b.n	8000530 <__udivmoddi4+0x12c>
 80006ca:	4630      	mov	r0, r6
 80006cc:	e709      	b.n	80004e2 <__udivmoddi4+0xde>
 80006ce:	4464      	add	r4, ip
 80006d0:	3802      	subs	r0, #2
 80006d2:	e742      	b.n	800055a <__udivmoddi4+0x156>

080006d4 <__aeabi_idiv0>:
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <zeros>:
#include <exercises_list.h>

/*
 * Ejercicio 01
 */
void zeros(uint32_t *vector, uint32_t longitud) {
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	for (uint32_t var = 0; var < longitud; ++var) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e008      	b.n	80006fa <zeros+0x22>
		*(vector + var) = 0;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
	for (uint32_t var = 0; var < longitud; ++var) {
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3f2      	bcc.n	80006e8 <zeros+0x10>
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <productoEscalar32>:

/*
 * Ejercicio 02
 */
void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut,
		uint32_t longitud, uint32_t escalar) {
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	603b      	str	r3, [r7, #0]
	for (uint32_t var = 0; var < longitud; ++var) {
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e00f      	b.n	8000744 <productoEscalar32+0x34>
		*(vectorOut + var) = *(vectorIn + var) * escalar;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	440b      	add	r3, r1
 8000736:	6839      	ldr	r1, [r7, #0]
 8000738:	fb01 f202 	mul.w	r2, r1, r2
 800073c:	601a      	str	r2, [r3, #0]
	for (uint32_t var = 0; var < longitud; ++var) {
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3eb      	bcc.n	8000724 <productoEscalar32+0x14>
	}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	371c      	adds	r7, #28
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <productoEscalar16>:

/*
 * Ejercicio 03
 */
void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut,
		uint32_t longitud, uint16_t escalar) {
 800075a:	b480      	push	{r7}
 800075c:	b087      	sub	sp, #28
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	807b      	strh	r3, [r7, #2]
	for (uint32_t var = 0; var < longitud; ++var) {
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e010      	b.n	8000790 <productoEscalar16+0x36>
		*(vectorOut + var) = *(vectorIn + var) * escalar;
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4413      	add	r3, r2
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	440b      	add	r3, r1
 8000780:	8879      	ldrh	r1, [r7, #2]
 8000782:	fb11 f202 	smulbb	r2, r1, r2
 8000786:	b292      	uxth	r2, r2
 8000788:	801a      	strh	r2, [r3, #0]
	for (uint32_t var = 0; var < longitud; ++var) {
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3ea      	bcc.n	800076e <productoEscalar16+0x14>
	}
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <productoEscalar12>:

/*
 * Ejercicio 04
 */
void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut,
		uint32_t longitud, uint16_t escalar) {
 80007a6:	b480      	push	{r7}
 80007a8:	b087      	sub	sp, #28
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	807b      	strh	r3, [r7, #2]
	uint32_t aux_val = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
	for (uint32_t var = 0; var < longitud; ++var) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	e01b      	b.n	80007f6 <productoEscalar12+0x50>
		aux_val = *(vectorIn + var) * escalar;
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	617b      	str	r3, [r7, #20]
		if (aux_val >= 0b0000111111111111) {
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80007d8:	4293      	cmp	r3, r2
 80007da:	d902      	bls.n	80007e2 <productoEscalar12+0x3c>
			aux_val = 0b0000111111111111;
 80007dc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80007e0:	617b      	str	r3, [r7, #20]
		}
		*(vectorOut + var) = aux_val;
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	b292      	uxth	r2, r2
 80007ee:	801a      	strh	r2, [r3, #0]
	for (uint32_t var = 0; var < longitud; ++var) {
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	3301      	adds	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3df      	bcc.n	80007be <productoEscalar12+0x18>
	}
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	371c      	adds	r7, #28
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <filtroVentana10>:

/*
 * Ejercicio 05
 */
void filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut,
		uint32_t longitudVectorIn) {
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	uint8_t nn_win = 10;	 // <- modify size
 8000818:	230a      	movs	r3, #10
 800081a:	74fb      	strb	r3, [r7, #19]
	uint8_t aux_n_win = nn_win;
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	77fb      	strb	r3, [r7, #31]
	uint32_t accum_val;
	uint32_t aux_lenVect = longitudVectorIn;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	617b      	str	r3, [r7, #20]
	while (aux_lenVect > 0) {
 8000824:	e02d      	b.n	8000882 <filtroVentana10+0x76>
		accum_val = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
		while (aux_n_win > 0) {
 800082a:	e015      	b.n	8000858 <filtroVentana10+0x4c>
			accum_val +=
					*(vectorIn
							+ (((aux_lenVect - 1) + (aux_n_win - 1))
 800082c:	7ffa      	ldrb	r2, [r7, #31]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	4413      	add	r3, r2
 8000832:	3b02      	subs	r3, #2
									% longitudVectorIn));
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	fbb3 f2f2 	udiv	r2, r3, r2
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	fb01 f202 	mul.w	r2, r1, r2
 8000840:	1a9b      	subs	r3, r3, r2
							+ (((aux_lenVect - 1) + (aux_n_win - 1))
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4413      	add	r3, r2
					*(vectorIn
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
			accum_val +=
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	4413      	add	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
			aux_n_win--;
 8000852:	7ffb      	ldrb	r3, [r7, #31]
 8000854:	3b01      	subs	r3, #1
 8000856:	77fb      	strb	r3, [r7, #31]
		while (aux_n_win > 0) {
 8000858:	7ffb      	ldrb	r3, [r7, #31]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e6      	bne.n	800082c <filtroVentana10+0x20>
		}
		aux_n_win = nn_win;
 800085e:	7cfb      	ldrb	r3, [r7, #19]
 8000860:	77fb      	strb	r3, [r7, #31]
		*(vectorOut + aux_lenVect - 1) = accum_val / aux_n_win;
 8000862:	7ffb      	ldrb	r3, [r7, #31]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	fbb2 f1f3 	udiv	r1, r2, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000870:	3b01      	subs	r3, #1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	4413      	add	r3, r2
 8000878:	b28a      	uxth	r2, r1
 800087a:	801a      	strh	r2, [r3, #0]
		aux_lenVect--;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3b01      	subs	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
	while (aux_lenVect > 0) {
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ce      	bne.n	8000826 <filtroVentana10+0x1a>
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3724      	adds	r7, #36	; 0x24
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <pack32to16>:

/*
 * Ejercicio 06
 */
void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t longitud) {
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
	while (longitud > 0) {
 80008a2:	e014      	b.n	80008ce <pack32to16+0x38>
		*(vectorOut + (longitud - 1)) = *(vectorIn + (longitud - 1)) >> 16;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008aa:	3b01      	subs	r3, #1
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1419      	asrs	r1, r3, #16
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80008bc:	3b01      	subs	r3, #1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	4413      	add	r3, r2
 80008c4:	b20a      	sxth	r2, r1
 80008c6:	801a      	strh	r2, [r3, #0]
		longitud--;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
	while (longitud > 0) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1e7      	bne.n	80008a4 <pack32to16+0xe>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <max>:

/*
 * Ejercicio 07
 */
int32_t max(int32_t *vectorIn, uint32_t longitud) {
 80008e2:	b480      	push	{r7}
 80008e4:	b085      	sub	sp, #20
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
	if (longitud < 1) {
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <max+0x16>
		return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e023      	b.n	8000940 <max+0x5e>
	}

	int32_t max_val = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]

	uint32_t pos = longitud - 1;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	60bb      	str	r3, [r7, #8]

	while (longitud > 0) {
 8000902:	e019      	b.n	8000938 <max+0x56>
		if (*(vectorIn + longitud - 1) > max_val) {
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800090a:	3b01      	subs	r3, #1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	429a      	cmp	r2, r3
 8000918:	da0b      	bge.n	8000932 <max+0x50>
			pos = longitud - 1;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
			max_val = *(vectorIn + longitud - 1);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000926:	3b01      	subs	r3, #1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
		}
		longitud--;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	3b01      	subs	r3, #1
 8000936:	603b      	str	r3, [r7, #0]
	while (longitud > 0) {
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1e2      	bne.n	8000904 <max+0x22>
	}
	return pos;
 800093e:	68bb      	ldr	r3, [r7, #8]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <downsampleM>:

/*
 * Ejercicio 08
 */
void downsampleM(int32_t *vectorIn, int32_t *vectorOut, uint32_t longitud,
		uint32_t N) {
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	603b      	str	r3, [r7, #0]
	uint32_t aux_inx_IN = 0, aux_inx_OUT = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]

	while (aux_inx_IN < longitud) {
 8000962:	e026      	b.n	80009b2 <downsampleM+0x66>
		if (N == 0) {
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d028      	beq.n	80009bc <downsampleM+0x70>
			break;
		}
		*(vectorOut + aux_inx_OUT) = *(vectorIn + aux_inx_IN);
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	441a      	add	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	440b      	add	r3, r1
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
		aux_inx_OUT++;
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	3301      	adds	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
		if ((aux_inx_IN + 1) % N == 0) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	fbb3 f2f2 	udiv	r2, r3, r2
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	fb01 f202 	mul.w	r2, r1, r2
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <downsampleM+0x60>
			aux_inx_OUT--;
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3b01      	subs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
			*(vectorOut + aux_inx_OUT) = 0;
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	4413      	add	r3, r2
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
		}
		aux_inx_IN++;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
	while (aux_inx_IN < longitud) {
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d4      	bcc.n	8000964 <downsampleM+0x18>
	}
}
 80009ba:	e000      	b.n	80009be <downsampleM+0x72>
			break;
 80009bc:	bf00      	nop
}
 80009be:	bf00      	nop
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <invertir>:

/*
 * Ejercicio 09
 */
void invertir(uint16_t *vector, uint32_t longitud) {
 80009ca:	b480      	push	{r7}
 80009cc:	b087      	sub	sp, #28
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint16_t aux_val;
	uint32_t mid_long = longitud / 2, aux_idx = 0;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	085b      	lsrs	r3, r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
	while (aux_idx < mid_long) {
 80009de:	e01e      	b.n	8000a1e <invertir+0x54>
		aux_val = *(vector + aux_idx);
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	81fb      	strh	r3, [r7, #14]
		*(vector + aux_idx) = *(vector + (longitud - 1 - aux_idx));
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	3b01      	subs	r3, #1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	441a      	add	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	440b      	add	r3, r1
 8000a02:	8812      	ldrh	r2, [r2, #0]
 8000a04:	801a      	strh	r2, [r3, #0]
		*(vector + (longitud - 1 - aux_idx)) = aux_val;
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	801a      	strh	r2, [r3, #0]
		aux_idx++;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
	while (aux_idx < mid_long) {
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3dc      	bcc.n	80009e0 <invertir+0x16>
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	371c      	adds	r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <corr>:

/*
 * Ejercicio 11
 */
void corr(int16_t *vectorX, int16_t *vectorY, int32_t *vectorCorr,
		uint32_t longitud) {
 8000a34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000a38:	b08d      	sub	sp, #52	; 0x34
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
	int64_t min_index_l = ((int32_t) longitud - 1) * -1;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f1c3 0301 	rsb	r3, r3, #1
 8000a4a:	17da      	asrs	r2, r3, #31
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	4693      	mov	fp, r2
 8000a50:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	int64_t max_index_l = ((int32_t) longitud - 1);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	17da      	asrs	r2, r3, #31
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	4691      	mov	r9, r2
 8000a5e:	e9c7 8904 	strd	r8, r9, [r7, #16]
	int32_t accum = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int l = min_index_l; l < max_index_l + 1; ++l) {
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6a:	e039      	b.n	8000ae0 <corr+0xac>
		accum = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int n = 0; n < longitud; ++n) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
 8000a74:	e022      	b.n	8000abc <corr+0x88>
			if (n - l > -1 && n - l < longitud) {
 8000a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db1a      	blt.n	8000ab6 <corr+0x82>
 8000a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d913      	bls.n	8000ab6 <corr+0x82>
				accum = *(vectorX + n) * *(vectorY + n - l) + accum;
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4413      	add	r3, r2
 8000a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aac:	fb01 f303 	mul.w	r3, r1, r3
 8000ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab2:	4413      	add	r3, r2
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int n = 0; n < longitud; ++n) {
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	3301      	adds	r3, #1
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8d8      	bhi.n	8000a76 <corr+0x42>
			}
		}
		*(vectorCorr + (l + longitud - 1)) = accum;
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ad8:	601a      	str	r2, [r3, #0]
	for (int l = min_index_l; l < max_index_l + 1; ++l) {
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	3301      	adds	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	17da      	asrs	r2, r3, #31
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4615      	mov	r5, r2
 8000ae8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	41ab      	sbcs	r3, r5
 8000af0:	dabc      	bge.n	8000a6c <corr+0x38>
	}

}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3734      	adds	r7, #52	; 0x34
 8000af8:	46bd      	mov	sp, r7
 8000afa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000afe:	4770      	bx	lr

08000b00 <PrivilegiosSVC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000b06:	f3ef 8314 	mrs	r3, CONTROL
 8000b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8000b0c:	687b      	ldr	r3, [r7, #4]
	// bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
	// bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
	//        Recordar que este valor solo se usa en modo Thread. Las
	//        interrupciones siempre se ejecutan en modo Handler con total
	//        privilegio.
	uint32_t x = __get_CONTROL();
 8000b0e:	61fb      	str	r3, [r7, #28]

	// Actividad de debug: Ver registro "control" y valor de variable "x".
	//__BKPT (0);

	x |= 1;
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	f383 8814 	msr	CONTROL, r3
}
 8000b22:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000b24:	f3ef 8314 	mrs	r3, CONTROL
 8000b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
	// bit 0 a modo No privilegiado.
	__set_CONTROL(x);

	// En este punto se estaria ejecutando en modo No privilegiado.
	// Lectura del registro "control" para confirmar.
	x = __get_CONTROL();
 8000b2c:	61fb      	str	r3, [r7, #28]

	// Actividad de debug: Ver registro "control" y valor de variable "x".
	//__BKPT (0);

	x &= ~1u;
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	f383 8814 	msr	CONTROL, r3
}
 8000b40:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000b42:	f3ef 8314 	mrs	r3, CONTROL
 8000b46:	617b      	str	r3, [r7, #20]
  return(result);
 8000b48:	697b      	ldr	r3, [r7, #20]
	// Se intenta volver a modo Privilegiado (bit 0, valor 0).
	__set_CONTROL(x);

	// Confirma que esta operacion es ignorada por estar ejecutandose en modo
	// Thread no privilegiado.
	x = __get_CONTROL();
 8000b4a:	61fb      	str	r3, [r7, #28]
	// Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
	// utilizando la instruccion "svc".
	// No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
	// es necesario implementar una funcion en assembler. Ver el archivo
	// asm_func.S.
	asm_svc();
 8000b4c:	f7ff fb4e 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000b50:	f3ef 8314 	mrs	r3, CONTROL
 8000b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b56:	69bb      	ldr	r3, [r7, #24]

	// El sistema operativo (el handler de SVC) deberia haber devuelto el modo
	// de ejecucion de Thread a privilegiado (bit 0 en valor 0).
	x = __get_CONTROL();
 8000b58:	61fb      	str	r3, [r7, #28]

	// Fin del ejemplo de SVC
}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b6a:	f000 fc89 	bl	8001480 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b6e:	f000 f8b9 	bl	8000ce4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b72:	f000 f9c7 	bl	8000f04 <MX_GPIO_Init>
	MX_ETH_Init();
 8000b76:	f000 f91f 	bl	8000db8 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000b7a:	f000 f96b 	bl	8000e54 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000b7e:	f000 f993 	bl	8000ea8 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */

	/********** Pregunta 01 **********/
	zeros(vectorIN_zeros_32bit, 3);
 8000b82:	2103      	movs	r1, #3
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <main+0x10c>)
 8000b86:	f7ff fda7 	bl	80006d8 <zeros>

	/********** Pregunta 02 **********/
	productoEscalar32(vectorIN_32b, vectorOUT_32b, 4, 2);
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	4939      	ldr	r1, [pc, #228]	; (8000c74 <main+0x110>)
 8000b90:	4839      	ldr	r0, [pc, #228]	; (8000c78 <main+0x114>)
 8000b92:	f7ff fdbd 	bl	8000710 <productoEscalar32>

	/********** Pregunta 03 **********/
	productoEscalar16(vectorIN_16b, vectorOUT_16b, 3, 4);
 8000b96:	2304      	movs	r3, #4
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4938      	ldr	r1, [pc, #224]	; (8000c7c <main+0x118>)
 8000b9c:	4838      	ldr	r0, [pc, #224]	; (8000c80 <main+0x11c>)
 8000b9e:	f7ff fddc 	bl	800075a <productoEscalar16>

	/********** Pregunta 04 **********/
	productoEscalar12(vectorIN_12b, vectorOUT_12b, 5, 4);
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	4937      	ldr	r1, [pc, #220]	; (8000c84 <main+0x120>)
 8000ba8:	4837      	ldr	r0, [pc, #220]	; (8000c88 <main+0x124>)
 8000baa:	f7ff fdfc 	bl	80007a6 <productoEscalar12>

	/********** Pregunta 05 **********/
	filtroVentana10(vectorIN_P05, vectorOUT_P05, sizeof(vectorIN_P05) / sizeof(uint16_t));
 8000bae:	226b      	movs	r2, #107	; 0x6b
 8000bb0:	4936      	ldr	r1, [pc, #216]	; (8000c8c <main+0x128>)
 8000bb2:	4837      	ldr	r0, [pc, #220]	; (8000c90 <main+0x12c>)
 8000bb4:	f7ff fe2a 	bl	800080c <filtroVentana10>

	/********** Pregunta 06 **********/
	pack32to16(vectorIN_P06, vectorOUT_P06,
 8000bb8:	220a      	movs	r2, #10
 8000bba:	4936      	ldr	r1, [pc, #216]	; (8000c94 <main+0x130>)
 8000bbc:	4836      	ldr	r0, [pc, #216]	; (8000c98 <main+0x134>)
 8000bbe:	f7ff fe6a 	bl	8000896 <pack32to16>
			sizeof(vectorIN_P06) / sizeof(uint32_t));

	/********** Pregunta 07 **********/
	int32_t posicion = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
	posicion = max(vectorIN_P07, sizeof(vectorIN_P07) / sizeof(uint32_t));
 8000bc6:	210a      	movs	r1, #10
 8000bc8:	4834      	ldr	r0, [pc, #208]	; (8000c9c <main+0x138>)
 8000bca:	f7ff fe8a 	bl	80008e2 <max>
 8000bce:	60f8      	str	r0, [r7, #12]

	/********** Pregunta 08 **********/
	downsampleM(vectorIN_P08, vectorOUT_P08, sizeof(vectorIN_P08) / sizeof(int32_t), 3);
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	2215      	movs	r2, #21
 8000bd4:	4932      	ldr	r1, [pc, #200]	; (8000ca0 <main+0x13c>)
 8000bd6:	4833      	ldr	r0, [pc, #204]	; (8000ca4 <main+0x140>)
 8000bd8:	f7ff feb8 	bl	800094c <downsampleM>

	/********** Pregunta 09 **********/
	invertir(vectorIN_P09, (uint32_t) (sizeof(vectorIN_P09) / sizeof(uint16_t)));
 8000bdc:	2107      	movs	r1, #7
 8000bde:	4832      	ldr	r0, [pc, #200]	; (8000ca8 <main+0x144>)
 8000be0:	f7ff fef3 	bl	80009ca <invertir>

	/********** Pregunta 11 **********/
	/** Premisa VectorX y VectorY tienen el mismo n칰mero de elementos **/
	/** VectorCorrelaci칩n se cambia a 32bits **/
	corr(vectorX_P11, vectorY_P11, vectorCorr_P11, sizeof(vectorX_P11) / sizeof(int16_t));
 8000be4:	2310      	movs	r3, #16
 8000be6:	4a31      	ldr	r2, [pc, #196]	; (8000cac <main+0x148>)
 8000be8:	4931      	ldr	r1, [pc, #196]	; (8000cb0 <main+0x14c>)
 8000bea:	4832      	ldr	r0, [pc, #200]	; (8000cb4 <main+0x150>)
 8000bec:	f7ff ff22 	bl	8000a34 <corr>

	PrivilegiosSVC();
 8000bf0:	f7ff ff86 	bl	8000b00 <PrivilegiosSVC>

	const uint32_t Resultado = asm_sum(5, 3);
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f7ff fafa 	bl	80001f0 <asm_sum>
 8000bfc:	60b8      	str	r0, [r7, #8]

	/********** ASM Pregunta 01 **********/
	asm_zeros(vectorIN_zeros_32bit, 3);
 8000bfe:	2103      	movs	r1, #3
 8000c00:	481b      	ldr	r0, [pc, #108]	; (8000c70 <main+0x10c>)
 8000c02:	f7ff faf7 	bl	80001f4 <asm_zeros>

	/********** ASM Pregunta 02 **********/
	asm_productoEscalar32(vectorIN_32b, vectorOUT_32b, 4, 2);
 8000c06:	2302      	movs	r3, #2
 8000c08:	2204      	movs	r2, #4
 8000c0a:	491a      	ldr	r1, [pc, #104]	; (8000c74 <main+0x110>)
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <main+0x114>)
 8000c0e:	f7ff faf8 	bl	8000202 <asm_productoEscalar32>

	/********** ASM Pregunta 03 **********/
	asm_productoEscalar16(vectorIN_16b, vectorOUT_16b, 4, 2);
 8000c12:	2302      	movs	r3, #2
 8000c14:	2204      	movs	r2, #4
 8000c16:	4919      	ldr	r1, [pc, #100]	; (8000c7c <main+0x118>)
 8000c18:	4819      	ldr	r0, [pc, #100]	; (8000c80 <main+0x11c>)
 8000c1a:	f7ff fafd 	bl	8000218 <asm_productoEscalar16>

	/********** ASM Pregunta 04 **********/
	asm_productoEscalar12(vectorIN_12b, vectorOUT_12b, 5, 4);
 8000c1e:	2304      	movs	r3, #4
 8000c20:	2205      	movs	r2, #5
 8000c22:	4918      	ldr	r1, [pc, #96]	; (8000c84 <main+0x120>)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <main+0x124>)
 8000c26:	f7ff fb02 	bl	800022e <asm_productoEscalar12>

	/********** ASM Pregunta 05 **********/
	asm_filtroVentana10(ASMvectorIN_P05, ASMvectorOUT_P05,
 8000c2a:	222f      	movs	r2, #47	; 0x2f
 8000c2c:	4922      	ldr	r1, [pc, #136]	; (8000cb8 <main+0x154>)
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <main+0x158>)
 8000c30:	f7ff fb0e 	bl	8000250 <asm_filtroVentana10>
			sizeof(ASMvectorIN_P05) / sizeof(uint16_t));

	/********** ASM Pregunta 06 **********/
	asm_pack32to16(ASMvectorIN_P06, ASMvectorOUT_P06,
 8000c34:	220a      	movs	r2, #10
 8000c36:	4922      	ldr	r1, [pc, #136]	; (8000cc0 <main+0x15c>)
 8000c38:	4822      	ldr	r0, [pc, #136]	; (8000cc4 <main+0x160>)
 8000c3a:	f7ff fb34 	bl	80002a6 <asm_pack32to16>
			sizeof(ASMvectorIN_P06) / sizeof(uint32_t));

	/********** ASM Pregunta 07 **********/
	int32_t ASMposicion = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
	ASMposicion = asm_max(ASMvectorIN_P07,
 8000c42:	210a      	movs	r1, #10
 8000c44:	4820      	ldr	r0, [pc, #128]	; (8000cc8 <main+0x164>)
 8000c46:	f7ff fb3b 	bl	80002c0 <asm_max>
 8000c4a:	6078      	str	r0, [r7, #4]
			sizeof(ASMvectorIN_P07) / sizeof(uint32_t));

	/********** ASM Pregunta 08 **********/
	asm_downsampleM(ASMvectorIN_P08, ASMvectorOUT_P08,
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	2215      	movs	r2, #21
 8000c50:	491e      	ldr	r1, [pc, #120]	; (8000ccc <main+0x168>)
 8000c52:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <main+0x16c>)
 8000c54:	f7ff fb45 	bl	80002e2 <asm_downsampleM>
			sizeof(ASMvectorIN_P08) / sizeof(int32_t), 3);

	/********** ASM Pregunta 09 **********/
	asm_invertir(ASMvectorIN_P09, (uint32_t) (sizeof(ASMvectorIN_P09) / sizeof(uint16_t)));
 8000c58:	2107      	movs	r1, #7
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <main+0x170>)
 8000c5c:	f7ff fb56 	bl	800030c <asm_invertir>

	/********** ASM Pregunta 11 **********/
	asm_corr(ASMvectorX_P11, ASMvectorY_P11, ASMvectorCorr_P11, sizeof(ASMvectorX_P11) / sizeof(int16_t));
 8000c60:	2310      	movs	r3, #16
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <main+0x174>)
 8000c64:	491d      	ldr	r1, [pc, #116]	; (8000cdc <main+0x178>)
 8000c66:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <main+0x17c>)
 8000c68:	f7ff fb6a 	bl	8000340 <asm_corr>
//	asm_testvector(vectorIN_32b);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c6c:	e7fe      	b.n	8000c6c <main+0x108>
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000388 	.word	0x20000388
 8000c78:	20000014 	.word	0x20000014
 8000c7c:	2000039c 	.word	0x2000039c
 8000c80:	20000028 	.word	0x20000028
 8000c84:	200003a8 	.word	0x200003a8
 8000c88:	20000034 	.word	0x20000034
 8000c8c:	200003b4 	.word	0x200003b4
 8000c90:	20000040 	.word	0x20000040
 8000c94:	200004ec 	.word	0x200004ec
 8000c98:	20000178 	.word	0x20000178
 8000c9c:	200001c8 	.word	0x200001c8
 8000ca0:	20000514 	.word	0x20000514
 8000ca4:	20000218 	.word	0x20000218
 8000ca8:	200002c0 	.word	0x200002c0
 8000cac:	200005bc 	.word	0x200005bc
 8000cb0:	20000300 	.word	0x20000300
 8000cb4:	200002e0 	.word	0x200002e0
 8000cb8:	2000048c 	.word	0x2000048c
 8000cbc:	20000118 	.word	0x20000118
 8000cc0:	20000500 	.word	0x20000500
 8000cc4:	200001a0 	.word	0x200001a0
 8000cc8:	200001f0 	.word	0x200001f0
 8000ccc:	20000568 	.word	0x20000568
 8000cd0:	2000026c 	.word	0x2000026c
 8000cd4:	200002d0 	.word	0x200002d0
 8000cd8:	20000638 	.word	0x20000638
 8000cdc:	20000340 	.word	0x20000340
 8000ce0:	20000320 	.word	0x20000320

08000ce4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	; 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fdb6 	bl	8003864 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000d58:	23a8      	movs	r3, #168	; 0xa8
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d60:	2307      	movs	r3, #7
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fafb 	bl	8002364 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x94>
		Error_Handler();
 8000d74:	f000 f974 	bl	8001060 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d88:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2105      	movs	r1, #5
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fd5c 	bl	8002854 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xc2>
		Error_Handler();
 8000da2:	f000 f95d 	bl	8001060 <Error_Handler>
	}
}
 8000da6:	bf00      	nop
 8000da8:	3750      	adds	r7, #80	; 0x50
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_ETH_Init+0x84>)
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <MX_ETH_Init+0x88>)
 8000dc0:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000dd0:	22e1      	movs	r2, #225	; 0xe1
 8000dd2:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_ETH_Init+0x84>)
 8000de8:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <MX_ETH_Init+0x8c>)
 8000dea:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_ETH_Init+0x84>)
 8000dee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000df2:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_ETH_Init+0x84>)
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <MX_ETH_Init+0x90>)
 8000df8:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_ETH_Init+0x84>)
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <MX_ETH_Init+0x94>)
 8000dfe:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ETH_Init+0x84>)
 8000e02:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e06:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_ETH_Init+0x84>)
 8000e0a:	f000 fcb5 	bl	8001778 <HAL_ETH_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ETH_Init+0x60>
		Error_Handler();
 8000e14:	f000 f924 	bl	8001060 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000e18:	2238      	movs	r2, #56	; 0x38
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_ETH_Init+0x98>)
 8000e1e:	f002 fd21 	bl	8003864 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_ETH_Init+0x98>)
 8000e24:	2221      	movs	r2, #33	; 0x21
 8000e26:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_ETH_Init+0x98>)
 8000e2a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e2e:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <MX_ETH_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000082c 	.word	0x2000082c
 8000e40:	40028000 	.word	0x40028000
 8000e44:	20000e2c 	.word	0x20000e2c
 8000e48:	2000078c 	.word	0x2000078c
 8000e4c:	200006ec 	.word	0x200006ec
 8000e50:	200006b4 	.word	0x200006b4

08000e54 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART3_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART3_UART_Init+0x4c>)
 8000e8c:	f001 ff02 	bl	8002c94 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000e96:	f000 f8e3 	bl	8001060 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200008dc 	.word	0x200008dc
 8000ea4:	40004800 	.word	0x40004800

08000ea8 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eb2:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eec:	f001 f91d 	bl	800212a <HAL_PCD_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000ef6:	f000 f8b3 	bl	8001060 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000920 	.word	0x20000920

08000f04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a4b      	ldr	r2, [pc, #300]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a44      	ldr	r2, [pc, #272]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b42      	ldr	r3, [pc, #264]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a3d      	ldr	r2, [pc, #244]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b37      	ldr	r3, [pc, #220]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a36      	ldr	r2, [pc, #216]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a28      	ldr	r2, [pc, #160]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <MX_GPIO_Init+0x150>)
 8000fca:	f001 f895 	bl	80020f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_GPIO_Init+0x154>)
 8000fd4:	f001 f890 	bl	80020f8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <MX_GPIO_Init+0x158>)
 8000ff0:	f000 fed6 	bl	8001da0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000ff4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ff8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <MX_GPIO_Init+0x150>)
 800100e:	f000 fec7 	bl	8001da0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001012:	2340      	movs	r3, #64	; 0x40
 8001014:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <MX_GPIO_Init+0x154>)
 800102a:	f000 feb9 	bl	8001da0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_GPIO_Init+0x154>)
 8001042:	f000 fead 	bl	8001da0 <HAL_GPIO_Init>

}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	; 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400
 8001058:	40021800 	.word	0x40021800
 800105c:	40020800 	.word	0x40020800

08001060 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001068:	e7fe      	b.n	8001068 <Error_Handler+0x8>
	...

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a55      	ldr	r2, [pc, #340]	; (8001230 <HAL_ETH_MspInit+0x174>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	f040 80a4 	bne.w	8001228 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	4b53      	ldr	r3, [pc, #332]	; (8001234 <HAL_ETH_MspInit+0x178>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_ETH_MspInit+0x178>)
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b50      	ldr	r3, [pc, #320]	; (8001234 <HAL_ETH_MspInit+0x178>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b49      	ldr	r3, [pc, #292]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	4b45      	ldr	r3, [pc, #276]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a44      	ldr	r2, [pc, #272]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a36      	ldr	r2, [pc, #216]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a28      	ldr	r2, [pc, #160]	; (8001234 <HAL_ETH_MspInit+0x178>)
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_ETH_MspInit+0x178>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011a4:	2332      	movs	r3, #50	; 0x32
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b4:	230b      	movs	r3, #11
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	481e      	ldr	r0, [pc, #120]	; (8001238 <HAL_ETH_MspInit+0x17c>)
 80011c0:	f000 fdee 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011c4:	2386      	movs	r3, #134	; 0x86
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d4:	230b      	movs	r3, #11
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_ETH_MspInit+0x180>)
 80011e0:	f000 fdde 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f6:	230b      	movs	r3, #11
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	480f      	ldr	r0, [pc, #60]	; (8001240 <HAL_ETH_MspInit+0x184>)
 8001202:	f000 fdcd 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001206:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001218:	230b      	movs	r3, #11
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_ETH_MspInit+0x188>)
 8001224:	f000 fdbc 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3738      	adds	r7, #56	; 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40028000 	.word	0x40028000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020800 	.word	0x40020800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40021800 	.word	0x40021800

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_UART_MspInit+0x84>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12c      	bne.n	80012c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_UART_MspInit+0x88>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0x88>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x88>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <HAL_UART_MspInit+0x88>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_UART_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b4:	2307      	movs	r3, #7
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspInit+0x8c>)
 80012c0:	f000 fd6e 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40004800 	.word	0x40004800
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020c00 	.word	0x40020c00

080012d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f8:	d13f      	bne.n	800137a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_PCD_MspInit+0xac>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001316:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001328:	230a      	movs	r3, #10
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <HAL_PCD_MspInit+0xb0>)
 8001334:	f000 fd34 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <HAL_PCD_MspInit+0xb0>)
 800134e:	f000 fd27 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	6353      	str	r3, [r2, #52]	; 0x34
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_PCD_MspInit+0xac>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80013b0:	f3ef 8314 	mrs	r3, CONTROL
 80013b4:	607b      	str	r3, [r7, #4]
  return(result);
 80013b6:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 80013b8:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f383 8814 	msr	CONTROL, r3
}
 80013cc:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fa:	f000 f893 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001428:	bf00      	nop
  nop
 800142a:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001448:	4c0b      	ldr	r4, [pc, #44]	; (8001478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001456:	f7ff ffd5 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f002 f9df 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff fb81 	bl	8000b64 <main>
  bx  lr    
 8001462:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001464:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8001470:	080038b4 	.word	0x080038b4
  ldr r2, =_sbss
 8001474:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8001478:	20000e38 	.word	0x20000e38

0800147c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <HAL_Init+0x40>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_Init+0x40>)
 8001496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x40>)
 80014a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f931 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fdda 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f93b 	bl	800175e <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f911 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000360 	.word	0x20000360
 800151c:	20000368 	.word	0x20000368
 8001520:	20000364 	.word	0x20000364

08001524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000368 	.word	0x20000368
 8001548:	20000e34 	.word	0x20000e34

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000e34 	.word	0x20000e34

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffde 	bl	800154c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000368 	.word	0x20000368

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff47 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff5c 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff8e 	bl	8001664 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffb0 	bl	80016cc <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06c      	b.n	8001864 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2223      	movs	r2, #35	; 0x23
 8001798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fc8d 	bl	80010bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_ETH_Init+0xf4>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <HAL_ETH_Init+0xf4>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_ETH_Init+0xf4>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_ETH_Init+0xf8>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <HAL_ETH_Init+0xf8>)
 80017c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_ETH_Init+0xf8>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4927      	ldr	r1, [pc, #156]	; (8001870 <HAL_ETH_Init+0xf8>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_ETH_Init+0xf8>)
 80017da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f4:	f7ff feaa 	bl	800154c <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017fa:	e011      	b.n	8001820 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017fc:	f7ff fea6 	bl	800154c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800180a:	d909      	bls.n	8001820 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	22e0      	movs	r2, #224	; 0xe0
 8001818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e021      	b.n	8001864 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e4      	bne.n	80017fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f944 	bl	8001ac0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f9eb 	bl	8001c14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa41 	bl	8001cc6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	461a      	mov	r2, r3
 800184a:	2100      	movs	r1, #0
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f9a9 	bl	8001ba4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2210      	movs	r2, #16
 800185e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40013800 	.word	0x40013800

08001874 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <ETH_SetMACConfig+0x134>)
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	7c1b      	ldrb	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <ETH_SetMACConfig+0x28>
 8001896:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800189a:	e000      	b.n	800189e <ETH_SetMACConfig+0x2a>
 800189c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7c5b      	ldrb	r3, [r3, #17]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <ETH_SetMACConfig+0x38>
 80018a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018aa:	e000      	b.n	80018ae <ETH_SetMACConfig+0x3a>
 80018ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	7fdb      	ldrb	r3, [r3, #31]
 80018ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	7f92      	ldrb	r2, [r2, #30]
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d102      	bne.n	80018d2 <ETH_SetMACConfig+0x5e>
 80018cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0x60>
 80018d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80018d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	7f1b      	ldrb	r3, [r3, #28]
 80018da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	791b      	ldrb	r3, [r3, #4]
 80018e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80018ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d102      	bne.n	80018fc <ETH_SetMACConfig+0x88>
 80018f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fa:	e000      	b.n	80018fe <ETH_SetMACConfig+0x8a>
 80018fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7bdb      	ldrb	r3, [r3, #15]
 8001904:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001906:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800190c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001914:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001916:	4313      	orrs	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff fe18 	bl	8001564 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	f64f 7341 	movw	r3, #65345	; 0xff41
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800195a:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001960:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001968:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001970:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001978:	4313      	orrs	r3, r2
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fde7 	bl	8001564 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	ff20810f 	.word	0xff20810f

080019ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <ETH_SetDMAConfig+0x110>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	7b1b      	ldrb	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <ETH_SetDMAConfig+0x2c>
 80019d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019d6:	e000      	b.n	80019da <ETH_SetDMAConfig+0x2e>
 80019d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	7b5b      	ldrb	r3, [r3, #13]
 80019de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	7f52      	ldrb	r2, [r2, #29]
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d102      	bne.n	80019f0 <ETH_SetDMAConfig+0x44>
 80019ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019ee:	e000      	b.n	80019f2 <ETH_SetDMAConfig+0x46>
 80019f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	7b9b      	ldrb	r3, [r3, #14]
 80019f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	7f1b      	ldrb	r3, [r3, #28]
 8001a06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	7f9b      	ldrb	r3, [r3, #30]
 8001a0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a20:	4313      	orrs	r3, r2
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a30:	461a      	mov	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff fd8e 	bl	8001564 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a50:	461a      	mov	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	791b      	ldrb	r3, [r3, #4]
 8001a5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff fd5f 	bl	8001564 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	f8de3f23 	.word	0xf8de3f23

08001ac0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0a6      	sub	sp, #152	; 0x98
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001afc:	2300      	movs	r3, #0
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fe9a 	bl	8001874 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b40:	2301      	movs	r3, #1
 8001b42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff08 	bl	80019ac <ETH_SetDMAConfig>
}
 8001b9c:	bf00      	nop
 8001b9e:	3798      	adds	r7, #152	; 0x98
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3305      	adds	r3, #5
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	3204      	adds	r2, #4
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <ETH_MACAddressConfig+0x68>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	061a      	lsls	r2, r3, #24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <ETH_MACAddressConfig+0x6c>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	6013      	str	r3, [r2, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40028040 	.word	0x40028040
 8001c10:	40028044 	.word	0x40028044

08001c14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e03e      	b.n	8001ca0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68d9      	ldr	r1, [r3, #12]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	3206      	adds	r2, #6
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d80c      	bhi.n	8001c84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68d9      	ldr	r1, [r3, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	e004      	b.n	8001c8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d9bd      	bls.n	8001c22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb8:	611a      	str	r2, [r3, #16]
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e046      	b.n	8001d62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6919      	ldr	r1, [r3, #16]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001d18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	3212      	adds	r2, #18
 8001d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d80c      	bhi.n	8001d52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6919      	ldr	r1, [r3, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	e004      	b.n	8001d5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d9b5      	bls.n	8001cd4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	e177      	b.n	80020ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8166 	bne.w	80020a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d005      	beq.n	8001df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d130      	bne.n	8001e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0201 	and.w	r2, r3, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d017      	beq.n	8001e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d123      	bne.n	8001ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	08da      	lsrs	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3208      	adds	r2, #8
 8001ede:	69b9      	ldr	r1, [r7, #24]
 8001ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80c0 	beq.w	80020a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a65      	ldr	r2, [pc, #404]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f42:	4a61      	ldr	r2, [pc, #388]	; (80020c8 <HAL_GPIO_Init+0x328>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a58      	ldr	r2, [pc, #352]	; (80020cc <HAL_GPIO_Init+0x32c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d037      	beq.n	8001fde <HAL_GPIO_Init+0x23e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_GPIO_Init+0x330>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d031      	beq.n	8001fda <HAL_GPIO_Init+0x23a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a56      	ldr	r2, [pc, #344]	; (80020d4 <HAL_GPIO_Init+0x334>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x236>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <HAL_GPIO_Init+0x338>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x232>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a54      	ldr	r2, [pc, #336]	; (80020dc <HAL_GPIO_Init+0x33c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x22e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <HAL_GPIO_Init+0x340>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x22a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_GPIO_Init+0x344>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x226>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a51      	ldr	r2, [pc, #324]	; (80020e8 <HAL_GPIO_Init+0x348>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x222>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a50      	ldr	r2, [pc, #320]	; (80020ec <HAL_GPIO_Init+0x34c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x21e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4f      	ldr	r2, [pc, #316]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x21a>
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	e012      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e010      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e00e      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e00c      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e00a      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fca:	2305      	movs	r3, #5
 8001fcc:	e008      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e004      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	f002 0203 	and.w	r2, r2, #3
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	4093      	lsls	r3, r2
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff0:	4935      	ldr	r1, [pc, #212]	; (80020c8 <HAL_GPIO_Init+0x328>)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002022:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_GPIO_Init+0x354>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800204c:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <HAL_GPIO_Init+0x354>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_GPIO_Init+0x354>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_GPIO_Init+0x354>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f67f ae84 	bls.w	8001dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40013800 	.word	0x40013800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40021c00 	.word	0x40021c00
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022400 	.word	0x40022400
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800212a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212c:	b08f      	sub	sp, #60	; 0x3c
 800212e:	af0a      	add	r7, sp, #40	; 0x28
 8002130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e10f      	b.n	800235c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff f8be 	bl	80012d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f001 f8ad 	bl	80032da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	687e      	ldr	r6, [r7, #4]
 8002188:	466d      	mov	r5, sp
 800218a:	f106 0410 	add.w	r4, r6, #16
 800218e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002196:	e894 0003 	ldmia.w	r4, {r0, r1}
 800219a:	e885 0003 	stmia.w	r5, {r0, r1}
 800219e:	1d33      	adds	r3, r6, #4
 80021a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a2:	6838      	ldr	r0, [r7, #0]
 80021a4:	f001 f838 	bl	8003218 <USB_CoreInit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0d0      	b.n	800235c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 f89b 	bl	80032fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e04a      	b.n	8002262 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	333d      	adds	r3, #61	; 0x3d
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	333c      	adds	r3, #60	; 0x3c
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	b298      	uxth	r0, r3
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3344      	adds	r3, #68	; 0x44
 8002208:	4602      	mov	r2, r0
 800220a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3340      	adds	r3, #64	; 0x40
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3348      	adds	r3, #72	; 0x48
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	334c      	adds	r3, #76	; 0x4c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	3354      	adds	r3, #84	; 0x54
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3af      	bcc.n	80021cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e044      	b.n	80022fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3b5      	bcc.n	8002272 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	687e      	ldr	r6, [r7, #4]
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002320:	e885 0003 	stmia.w	r5, {r0, r1}
 8002324:	1d33      	adds	r3, r6, #4
 8002326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f001 f833 	bl	8003394 <USB_DevInit>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e00d      	b.n	800235c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f001 f9fe 	bl	8003756 <USB_DevDisconnect>

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e267      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d00c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d112      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d157      	bne.n	800246c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e242      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x74>
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6f      	ldr	r2, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6c      	ldr	r2, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023fc:	4b69      	ldr	r3, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a68      	ldr	r2, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff f896 	bl	800154c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff f892 	bl	800154c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e207      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xc0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff f882 	bl	800154c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff f87e 	bl	800154c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1f3      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0xe8>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c7      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_RCC_OscConfig+0x244>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff f837 	bl	800154c <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff f833 	bl	800154c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a8      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4925      	ldr	r1, [pc, #148]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x244>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7ff f816 	bl	800154c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff f812 	bl	800154c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e187      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d036      	beq.n	80025bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_RCC_OscConfig+0x248>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fff6 	bl	800154c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fff2 	bl	800154c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e167      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x200>
 8002582:	e01b      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_OscConfig+0x248>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe ffdf 	bl	800154c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	e00e      	b.n	80025b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002592:	f7fe ffdb 	bl	800154c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d907      	bls.n	80025b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e150      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	42470000 	.word	0x42470000
 80025ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	4b88      	ldr	r3, [pc, #544]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ea      	bne.n	8002592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8097 	beq.w	80026f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b81      	ldr	r3, [pc, #516]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b7d      	ldr	r3, [pc, #500]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a7c      	ldr	r2, [pc, #496]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b7a      	ldr	r3, [pc, #488]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b77      	ldr	r3, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe ff9b 	bl	800154c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe ff97 	bl	800154c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e10c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x2ea>
 8002640:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x30c>
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a5e      	ldr	r2, [pc, #376]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 8002670:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a57      	ldr	r2, [pc, #348]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
 800267c:	4b55      	ldr	r3, [pc, #340]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d015      	beq.n	80026bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe ff5c 	bl	800154c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe ff58 	bl	800154c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0cb      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ee      	beq.n	8002698 <HAL_RCC_OscConfig+0x334>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fe ff46 	bl	800154c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe ff42 	bl	800154c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0b5      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ee      	bne.n	80026c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a1 	beq.w	8002844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	d05c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d141      	bne.n	800279a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe ff16 	bl	800154c <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe ff12 	bl	800154c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e087      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	491b      	ldr	r1, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x478>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe feeb 	bl	800154c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fee7 	bl	800154c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e05c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x416>
 8002798:	e054      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x478>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fed4 	bl	800154c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fed0 	bl	800154c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e045      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x444>
 80027c6:	e03d      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e038      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d028      	beq.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d121      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d11a      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	4293      	cmp	r3, r2
 800281a:	d111      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fe02 	bl	800154c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fdfe 	bl	800154c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fd62 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	0800388c 	.word	0x0800388c
 8002a18:	20000360 	.word	0x20000360
 8002a1c:	20000364 	.word	0x20000364

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b094      	sub	sp, #80	; 0x50
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a30:	2300      	movs	r3, #0
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x40>
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f200 80e1 	bhi.w	8002c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a52:	e0db      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a58:	e0db      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5a:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5e:	e0d8      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a60:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	0159      	lsls	r1, r3, #5
 8002aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa4:	0150      	lsls	r0, r2, #5
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4621      	mov	r1, r4
 8002aac:	1a51      	subs	r1, r2, r1
 8002aae:	6139      	str	r1, [r7, #16]
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	018b      	lsls	r3, r1, #6
 8002ac8:	4651      	mov	r1, sl
 8002aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ace:	4651      	mov	r1, sl
 8002ad0:	018a      	lsls	r2, r1, #6
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ad8:	4659      	mov	r1, fp
 8002ada:	eb63 0901 	sbc.w	r9, r3, r1
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af2:	4690      	mov	r8, r2
 8002af4:	4699      	mov	r9, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	eb18 0303 	adds.w	r3, r8, r3
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	462b      	mov	r3, r5
 8002b00:	eb49 0303 	adc.w	r3, r9, r3
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b12:	4629      	mov	r1, r5
 8002b14:	024b      	lsls	r3, r1, #9
 8002b16:	4621      	mov	r1, r4
 8002b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	024a      	lsls	r2, r1, #9
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b26:	2200      	movs	r2, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b30:	f7fd fc50 	bl	80003d4 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3c:	e058      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	2200      	movs	r2, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	4611      	mov	r1, r2
 8002b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b58:	4642      	mov	r2, r8
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	f04f 0000 	mov.w	r0, #0
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	0159      	lsls	r1, r3, #5
 8002b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6a:	0150      	lsls	r0, r2, #5
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4641      	mov	r1, r8
 8002b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b76:	4649      	mov	r1, r9
 8002b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b90:	ebb2 040a 	subs.w	r4, r2, sl
 8002b94:	eb63 050b 	sbc.w	r5, r3, fp
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	00eb      	lsls	r3, r5, #3
 8002ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba6:	00e2      	lsls	r2, r4, #3
 8002ba8:	4614      	mov	r4, r2
 8002baa:	461d      	mov	r5, r3
 8002bac:	4643      	mov	r3, r8
 8002bae:	18e3      	adds	r3, r4, r3
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	eb45 0303 	adc.w	r3, r5, r3
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	028b      	lsls	r3, r1, #10
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	028a      	lsls	r2, r1, #10
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	61fa      	str	r2, [r7, #28]
 8002be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be4:	f7fd fbf6 	bl	80003d4 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3750      	adds	r7, #80	; 0x50
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000360 	.word	0x20000360

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	0800389c 	.word	0x0800389c

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c70:	f7ff ffdc 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0b5b      	lsrs	r3, r3, #13
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	0800389c 	.word	0x0800389c

08002c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e03f      	b.n	8002d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fac4 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2224      	movs	r2, #36	; 0x24
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f829 	bl	8002d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b0c0      	sub	sp, #256	; 0x100
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	68d9      	ldr	r1, [r3, #12]
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	ea40 0301 	orr.w	r3, r0, r1
 8002d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d88:	f021 010c 	bic.w	r1, r1, #12
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d96:	430b      	orrs	r3, r1
 8002d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	6999      	ldr	r1, [r3, #24]
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	ea40 0301 	orr.w	r3, r0, r1
 8002db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b8f      	ldr	r3, [pc, #572]	; (8002ffc <UART_SetConfig+0x2cc>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d005      	beq.n	8002dd0 <UART_SetConfig+0xa0>
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b8d      	ldr	r3, [pc, #564]	; (8003000 <UART_SetConfig+0x2d0>)
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d104      	bne.n	8002dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dd0:	f7ff ff4c 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 8002dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dd8:	e003      	b.n	8002de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dda:	f7ff ff33 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8002dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dec:	f040 810c 	bne.w	8003008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	1891      	adds	r1, r2, r2
 8002e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e0a:	415b      	adcs	r3, r3
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e12:	4621      	mov	r1, r4
 8002e14:	eb12 0801 	adds.w	r8, r2, r1
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb43 0901 	adc.w	r9, r3, r1
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e32:	4690      	mov	r8, r2
 8002e34:	4699      	mov	r9, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	eb18 0303 	adds.w	r3, r8, r3
 8002e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e40:	462b      	mov	r3, r5
 8002e42:	eb49 0303 	adc.w	r3, r9, r3
 8002e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e5e:	460b      	mov	r3, r1
 8002e60:	18db      	adds	r3, r3, r3
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
 8002e64:	4613      	mov	r3, r2
 8002e66:	eb42 0303 	adc.w	r3, r2, r3
 8002e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e74:	f7fd faae 	bl	80003d4 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <UART_SetConfig+0x2d4>)
 8002e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	011c      	lsls	r4, r3, #4
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	1891      	adds	r1, r2, r2
 8002e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ea0:	415b      	adcs	r3, r3
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8002eae:	4649      	mov	r1, r9
 8002eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec8:	4692      	mov	sl, r2
 8002eca:	469b      	mov	fp, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	eb1a 0303 	adds.w	r3, sl, r3
 8002ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8002edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	18db      	adds	r3, r3, r3
 8002ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8002efa:	4613      	mov	r3, r2
 8002efc:	eb42 0303 	adc.w	r3, r2, r3
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
 8002f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f0a:	f7fd fa63 	bl	80003d4 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <UART_SetConfig+0x2d4>)
 8002f16:	fba3 2301 	umull	r2, r3, r3, r1
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2264      	movs	r2, #100	; 0x64
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	1acb      	subs	r3, r1, r3
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <UART_SetConfig+0x2d4>)
 8002f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f38:	441c      	add	r4, r3
 8002f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1891      	adds	r1, r2, r2
 8002f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f54:	415b      	adcs	r3, r3
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	1851      	adds	r1, r2, r1
 8002f60:	6339      	str	r1, [r7, #48]	; 0x30
 8002f62:	4649      	mov	r1, r9
 8002f64:	414b      	adcs	r3, r1
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f74:	4659      	mov	r1, fp
 8002f76:	00cb      	lsls	r3, r1, #3
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7e:	4651      	mov	r1, sl
 8002f80:	00ca      	lsls	r2, r1, #3
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	4642      	mov	r2, r8
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f90:	464b      	mov	r3, r9
 8002f92:	460a      	mov	r2, r1
 8002f94:	eb42 0303 	adc.w	r3, r2, r3
 8002f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	18db      	adds	r3, r3, r3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fc6:	f7fd fa05 	bl	80003d4 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <UART_SetConfig+0x2d4>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3332      	adds	r3, #50	; 0x32
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <UART_SetConfig+0x2d4>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4422      	add	r2, r4
 8002ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ff8:	e105      	b.n	8003206 <UART_SetConfig+0x4d6>
 8002ffa:	bf00      	nop
 8002ffc:	40011000 	.word	0x40011000
 8003000:	40011400 	.word	0x40011400
 8003004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300c:	2200      	movs	r2, #0
 800300e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800301a:	4642      	mov	r2, r8
 800301c:	464b      	mov	r3, r9
 800301e:	1891      	adds	r1, r2, r2
 8003020:	6239      	str	r1, [r7, #32]
 8003022:	415b      	adcs	r3, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800302a:	4641      	mov	r1, r8
 800302c:	1854      	adds	r4, r2, r1
 800302e:	4649      	mov	r1, r9
 8003030:	eb43 0501 	adc.w	r5, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	00eb      	lsls	r3, r5, #3
 800303e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003042:	00e2      	lsls	r2, r4, #3
 8003044:	4614      	mov	r4, r2
 8003046:	461d      	mov	r5, r3
 8003048:	4643      	mov	r3, r8
 800304a:	18e3      	adds	r3, r4, r3
 800304c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003050:	464b      	mov	r3, r9
 8003052:	eb45 0303 	adc.w	r3, r5, r3
 8003056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003076:	4629      	mov	r1, r5
 8003078:	008b      	lsls	r3, r1, #2
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003080:	4621      	mov	r1, r4
 8003082:	008a      	lsls	r2, r1, #2
 8003084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003088:	f7fd f9a4 	bl	80003d4 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4b60      	ldr	r3, [pc, #384]	; (8003214 <UART_SetConfig+0x4e4>)
 8003092:	fba3 2302 	umull	r2, r3, r3, r2
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	011c      	lsls	r4, r3, #4
 800309a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	1891      	adds	r1, r2, r2
 80030b2:	61b9      	str	r1, [r7, #24]
 80030b4:	415b      	adcs	r3, r3
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030bc:	4641      	mov	r1, r8
 80030be:	1851      	adds	r1, r2, r1
 80030c0:	6139      	str	r1, [r7, #16]
 80030c2:	4649      	mov	r1, r9
 80030c4:	414b      	adcs	r3, r1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d4:	4659      	mov	r1, fp
 80030d6:	00cb      	lsls	r3, r1, #3
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030de:	4651      	mov	r1, sl
 80030e0:	00ca      	lsls	r2, r1, #3
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4642      	mov	r2, r8
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f0:	464b      	mov	r3, r9
 80030f2:	460a      	mov	r2, r1
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	67bb      	str	r3, [r7, #120]	; 0x78
 8003106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003114:	4649      	mov	r1, r9
 8003116:	008b      	lsls	r3, r1, #2
 8003118:	4641      	mov	r1, r8
 800311a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800311e:	4641      	mov	r1, r8
 8003120:	008a      	lsls	r2, r1, #2
 8003122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003126:	f7fd f955 	bl	80003d4 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <UART_SetConfig+0x4e4>)
 8003130:	fba3 1302 	umull	r1, r3, r3, r2
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	2164      	movs	r1, #100	; 0x64
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	3332      	adds	r3, #50	; 0x32
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <UART_SetConfig+0x4e4>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314e:	441c      	add	r4, r3
 8003150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003154:	2200      	movs	r2, #0
 8003156:	673b      	str	r3, [r7, #112]	; 0x70
 8003158:	677a      	str	r2, [r7, #116]	; 0x74
 800315a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800315e:	4642      	mov	r2, r8
 8003160:	464b      	mov	r3, r9
 8003162:	1891      	adds	r1, r2, r2
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	415b      	adcs	r3, r3
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800316e:	4641      	mov	r1, r8
 8003170:	1851      	adds	r1, r2, r1
 8003172:	6039      	str	r1, [r7, #0]
 8003174:	4649      	mov	r1, r9
 8003176:	414b      	adcs	r3, r1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003186:	4659      	mov	r1, fp
 8003188:	00cb      	lsls	r3, r1, #3
 800318a:	4651      	mov	r1, sl
 800318c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003190:	4651      	mov	r1, sl
 8003192:	00ca      	lsls	r2, r1, #3
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	4603      	mov	r3, r0
 800319a:	4642      	mov	r2, r8
 800319c:	189b      	adds	r3, r3, r2
 800319e:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a0:	464b      	mov	r3, r9
 80031a2:	460a      	mov	r2, r1
 80031a4:	eb42 0303 	adc.w	r3, r2, r3
 80031a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	663b      	str	r3, [r7, #96]	; 0x60
 80031b4:	667a      	str	r2, [r7, #100]	; 0x64
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031c2:	4649      	mov	r1, r9
 80031c4:	008b      	lsls	r3, r1, #2
 80031c6:	4641      	mov	r1, r8
 80031c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031cc:	4641      	mov	r1, r8
 80031ce:	008a      	lsls	r2, r1, #2
 80031d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031d4:	f7fd f8fe 	bl	80003d4 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <UART_SetConfig+0x4e4>)
 80031de:	fba3 1302 	umull	r1, r3, r3, r2
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2164      	movs	r1, #100	; 0x64
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	3332      	adds	r3, #50	; 0x32
 80031f0:	4a08      	ldr	r2, [pc, #32]	; (8003214 <UART_SetConfig+0x4e4>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4422      	add	r2, r4
 8003204:	609a      	str	r2, [r3, #8]
}
 8003206:	bf00      	nop
 8003208:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	51eb851f 	.word	0x51eb851f

08003218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003218:	b084      	sub	sp, #16
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	f107 001c 	add.w	r0, r7, #28
 8003226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	2b01      	cmp	r3, #1
 800322e:	d122      	bne.n	8003276 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 faa2 	bl	80037b4 <USB_CoreReset>
 8003270:	4603      	mov	r3, r0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e01a      	b.n	80032ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa96 	bl	80037b4 <USB_CoreReset>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
 800329e:	e005      	b.n	80032ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10b      	bne.n	80032ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f043 0206 	orr.w	r2, r3, #6
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d6:	b004      	add	sp, #16
 80032d8:	4770      	bx	lr

080032da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d115      	bne.n	800334a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800332a:	2001      	movs	r0, #1
 800332c:	f7fe f91a 	bl	8001564 <HAL_Delay>
      ms++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa2e 	bl	8003798 <USB_GetMode>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d01e      	beq.n	8003380 <USB_SetCurrentMode+0x84>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b31      	cmp	r3, #49	; 0x31
 8003346:	d9f0      	bls.n	800332a <USB_SetCurrentMode+0x2e>
 8003348:	e01a      	b.n	8003380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d115      	bne.n	800337c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800335c:	2001      	movs	r0, #1
 800335e:	f7fe f901 	bl	8001564 <HAL_Delay>
      ms++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fa15 	bl	8003798 <USB_GetMode>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <USB_SetCurrentMode+0x84>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b31      	cmp	r3, #49	; 0x31
 8003378:	d9f0      	bls.n	800335c <USB_SetCurrentMode+0x60>
 800337a:	e001      	b.n	8003380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e005      	b.n	800338c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b32      	cmp	r3, #50	; 0x32
 8003384:	d101      	bne.n	800338a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003394:	b084      	sub	sp, #16
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e009      	b.n	80033c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	3340      	adds	r3, #64	; 0x40
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	3301      	adds	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b0e      	cmp	r3, #14
 80033cc:	d9f2      	bls.n	80033b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11c      	bne.n	800340e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
 800340c:	e00b      	b.n	8003426 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800342c:	461a      	mov	r2, r3
 800342e:	2300      	movs	r3, #0
 8003430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003438:	4619      	mov	r1, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003440:	461a      	mov	r2, r3
 8003442:	680b      	ldr	r3, [r1, #0]
 8003444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10c      	bne.n	8003466 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003452:	2100      	movs	r1, #0
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f965 	bl	8003724 <USB_SetDevSpeed>
 800345a:	e008      	b.n	800346e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800345c:	2101      	movs	r1, #1
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f960 	bl	8003724 <USB_SetDevSpeed>
 8003464:	e003      	b.n	800346e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003466:	2103      	movs	r1, #3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f95b 	bl	8003724 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800346e:	2110      	movs	r1, #16
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8f3 	bl	800365c <USB_FlushTxFifo>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f91f 	bl	80036c4 <USB_FlushRxFifo>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	461a      	mov	r2, r3
 8003498:	2300      	movs	r3, #0
 800349a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a2:	461a      	mov	r2, r3
 80034a4:	2300      	movs	r3, #0
 80034a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	461a      	mov	r2, r3
 80034b0:	2300      	movs	r3, #0
 80034b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e043      	b.n	8003542 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d0:	d118      	bne.n	8003504 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	461a      	mov	r2, r3
 80034e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e013      	b.n	8003516 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fa:	461a      	mov	r2, r3
 80034fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e008      	b.n	8003516 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003510:	461a      	mov	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003522:	461a      	mov	r2, r3
 8003524:	2300      	movs	r3, #0
 8003526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	461a      	mov	r2, r3
 8003536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800353a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3301      	adds	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3b7      	bcc.n	80034ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e043      	b.n	80035d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003566:	d118      	bne.n	800359a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	461a      	mov	r2, r3
 800357c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e013      	b.n	80035ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e008      	b.n	80035ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a6:	461a      	mov	r2, r3
 80035a8:	2300      	movs	r3, #0
 80035aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b8:	461a      	mov	r2, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ca:	461a      	mov	r2, r3
 80035cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3301      	adds	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3b7      	bcc.n	8003550 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f043 0210 	orr.w	r2, r3, #16
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <USB_DevInit+0x2c4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f043 0208 	orr.w	r2, r3, #8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003648:	7dfb      	ldrb	r3, [r7, #23]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003654:	b004      	add	sp, #16
 8003656:	4770      	bx	lr
 8003658:	803c3800 	.word	0x803c3800

0800365c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <USB_FlushTxFifo+0x64>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e01b      	b.n	80036b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	daf2      	bge.n	800366a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	019b      	lsls	r3, r3, #6
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <USB_FlushTxFifo+0x64>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e006      	b.n	80036b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d0f0      	beq.n	8003694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	00030d40 	.word	0x00030d40

080036c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a11      	ldr	r2, [pc, #68]	; (8003720 <USB_FlushRxFifo+0x5c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e018      	b.n	8003714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	daf2      	bge.n	80036d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2210      	movs	r2, #16
 80036f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a08      	ldr	r2, [pc, #32]	; (8003720 <USB_FlushRxFifo+0x5c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e006      	b.n	8003714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b10      	cmp	r3, #16
 8003710:	d0f0      	beq.n	80036f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	00030d40 	.word	0x00030d40

08003724 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	68f9      	ldr	r1, [r7, #12]
 8003740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0301 	and.w	r3, r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <USB_CoreReset+0x64>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e01b      	b.n	800380a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	daf2      	bge.n	80037c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <USB_CoreReset+0x64>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e006      	b.n	800380a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d0f0      	beq.n	80037ea <USB_CoreReset+0x36>

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	00030d40 	.word	0x00030d40

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4d0d      	ldr	r5, [pc, #52]	; (8003854 <__libc_init_array+0x38>)
 8003820:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	2600      	movs	r6, #0
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	4d0b      	ldr	r5, [pc, #44]	; (800385c <__libc_init_array+0x40>)
 800382e:	4c0c      	ldr	r4, [pc, #48]	; (8003860 <__libc_init_array+0x44>)
 8003830:	f000 f820 	bl	8003874 <_init>
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	2600      	movs	r6, #0
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	080038ac 	.word	0x080038ac
 8003858:	080038ac 	.word	0x080038ac
 800385c:	080038ac 	.word	0x080038ac
 8003860:	080038b0 	.word	0x080038b0

08003864 <memset>:
 8003864:	4402      	add	r2, r0
 8003866:	4603      	mov	r3, r0
 8003868:	4293      	cmp	r3, r2
 800386a:	d100      	bne.n	800386e <memset+0xa>
 800386c:	4770      	bx	lr
 800386e:	f803 1b01 	strb.w	r1, [r3], #1
 8003872:	e7f9      	b.n	8003868 <memset+0x4>

08003874 <_init>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr

08003880 <_fini>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr
